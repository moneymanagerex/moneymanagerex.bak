/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////

#include "INFOTABLE_V1.h"

/** ACTIVE_RECORD **/
INFOTABLE_V1::INFOTABLE_V1():wxSqliteActiveRecord(){
}

INFOTABLE_V1::INFOTABLE_V1(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table):wxSqliteActiveRecord(name,server,user,password,table){
}

INFOTABLE_V1::INFOTABLE_V1(DatabaseLayer* database,const wxString& table):wxSqliteActiveRecord(database,table){
}

bool INFOTABLE_V1::Create(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table){
	return wxSqliteActiveRecord::Create(name,server,user,password,table);
}

INFOTABLE_V1Row* INFOTABLE_V1::RowFromResult(DatabaseResultSet* result){
	INFOTABLE_V1Row* row=new INFOTABLE_V1Row(this);
	
	row->GetFromResult(result);
	
	return row;
}

INFOTABLE_V1Row* INFOTABLE_V1::New(){
	INFOTABLE_V1Row* newRow=new INFOTABLE_V1Row(this);
	garbageRows.Add(newRow);
	return newRow;
}
bool INFOTABLE_V1::Delete(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE INFOID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}



INFOTABLE_V1Row* INFOTABLE_V1::INFOID(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("SELECT * FROM %s WHERE INFOID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		DatabaseResultSet* result= pStatement->ExecuteQuery();

		result->Next();
		INFOTABLE_V1Row* row=RowFromResult(result);
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return NULL;
	}
}




INFOTABLE_V1Row* INFOTABLE_V1::Where(const wxString& whereClause){
	try{
		wxString prepStatement = wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(!result->Next())
			return NULL;
		INFOTABLE_V1Row* row=RowFromResult(result);
		
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);						
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

INFOTABLE_V1RowSet* INFOTABLE_V1::WhereSet(const wxString& whereClause,const wxString& orderBy){
	INFOTABLE_V1RowSet* rowSet=new INFOTABLE_V1RowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}


INFOTABLE_V1RowSet* INFOTABLE_V1::All(const wxString& orderBy){
	INFOTABLE_V1RowSet* rowSet=new INFOTABLE_V1RowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s"),m_table.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

/** END ACTIVE RECORD **/

/** ACTIVE RECORD ROW **/

INFOTABLE_V1Row::INFOTABLE_V1Row():wxActiveRecordRow(){
	bool newRow=true;
}

INFOTABLE_V1Row::INFOTABLE_V1Row(INFOTABLE_V1* activeRecord):wxActiveRecordRow(activeRecord){
	bool newRow=true;
}

INFOTABLE_V1Row::INFOTABLE_V1Row(const INFOTABLE_V1Row& src){
	if(&src==this)
		return;
	newRow=src.newRow;
	
	INFOVALUE=src.INFOVALUE;
	INFONAME=src.INFONAME;
	INFOID=src.INFOID;

}

INFOTABLE_V1Row::INFOTABLE_V1Row(DatabaseLayer* database,const wxString& table):wxActiveRecordRow(database,table){
	newRow=true;
}
	

INFOTABLE_V1Row& INFOTABLE_V1Row::operator=(const INFOTABLE_V1Row& src){
	if(&src==this)
		return *this;
	newRow=src.newRow;
	
	INFOVALUE=src.INFOVALUE;
	INFONAME=src.INFONAME;
	INFOID=src.INFOID;


	return *this;
}

bool INFOTABLE_V1Row::GetFromResult(DatabaseResultSet* result){
	
	newRow=false;
		INFOVALUE=result->GetResultString(wxT("INFOVALUE"));
	INFONAME=result->GetResultString(wxT("INFONAME"));
	INFOID=result->GetResultInt(wxT("INFOID"));


	return true;
}
	

bool INFOTABLE_V1Row::Save(){
	try{
		if(newRow){
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("INSERT INTO %s (INFOVALUE,INFONAME) VALUES (?,?)"),m_table.c_str()));
			pStatement->SetParamString(1,INFOVALUE);
			pStatement->SetParamString(2,INFONAME);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

			
			newRow=false;
		}
		else{
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("UPDATE %s SET INFOVALUE=?,INFONAME=? WHERE INFOID=?"),m_table.c_str()));
			pStatement->SetParamString(1,INFOVALUE);
			pStatement->SetParamString(2,INFONAME);
			pStatement->SetParamInt(3,INFOID);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

		}
		
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		wxActiveRecord::ProcessException(e);
		return false;
	}
}

bool INFOTABLE_V1Row::Delete(){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE INFOID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,INFOID);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}





/** END ACTIVE RECORD ROW **/

/** ACTIVE RECORD ROW SET **/

INFOTABLE_V1RowSet::INFOTABLE_V1RowSet():wxActiveRecordRowSet(){
}

INFOTABLE_V1RowSet::INFOTABLE_V1RowSet(wxActiveRecord* activeRecord):wxActiveRecordRowSet(activeRecord){
}

INFOTABLE_V1RowSet::INFOTABLE_V1RowSet(DatabaseLayer* database,const wxString& table):wxActiveRecordRowSet(database,table){
}

INFOTABLE_V1Row* INFOTABLE_V1RowSet::Item(unsigned long item){
	return (INFOTABLE_V1Row*)wxActiveRecordRowSet::Item(item);
}


bool INFOTABLE_V1RowSet::SaveAll(){
	try{
		m_database->BeginTransaction();
		for(unsigned long i=0;i<Count();i++)
			Item(i)->Save();
		m_database->Commit();
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		m_database->RollBack();
		wxActiveRecord::ProcessException(e);
		return false;
	}
}


int INFOTABLE_V1RowSet::CMPFUNC_INFOVALUE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	INFOTABLE_V1Row** m_item1=(INFOTABLE_V1Row**)item1;
	INFOTABLE_V1Row** m_item2=(INFOTABLE_V1Row**)item2;
	return (*m_item1)->INFOVALUE.Cmp((*m_item2)->INFOVALUE);
}

int INFOTABLE_V1RowSet::CMPFUNC_INFONAME(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	INFOTABLE_V1Row** m_item1=(INFOTABLE_V1Row**)item1;
	INFOTABLE_V1Row** m_item2=(INFOTABLE_V1Row**)item2;
	return (*m_item1)->INFONAME.Cmp((*m_item2)->INFONAME);
}

int INFOTABLE_V1RowSet::CMPFUNC_INFOID(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	INFOTABLE_V1Row** m_item1=(INFOTABLE_V1Row**)item1;
	INFOTABLE_V1Row** m_item2=(INFOTABLE_V1Row**)item2;
	if((*m_item1)->INFOID<(*m_item2)->INFOID)
		return -1;
	else if((*m_item1)->INFOID>(*m_item2)->INFOID)
		return 1;
	else
		return 0;
}

CMPFUNC_proto INFOTABLE_V1RowSet::GetCmpFunc(const wxString& var) const{
	if(var==wxT("INFOVALUE"))
		return (CMPFUNC_proto)CMPFUNC_INFOVALUE;
	else if(var==wxT("INFONAME"))
		return (CMPFUNC_proto)CMPFUNC_INFONAME;
	else if(var==wxT("INFOID"))
		return (CMPFUNC_proto)CMPFUNC_INFOID;
	else 
	return (CMPFUNC_proto)CMPFUNC_default;
}



/** END ACTIVE RECORD ROW SET **/

////@@begin custom implementations



////@@end custom implementations