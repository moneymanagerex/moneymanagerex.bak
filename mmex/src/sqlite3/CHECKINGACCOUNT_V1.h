/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////


#ifndef __C_H_E_C_K_I_N_G_A_C_C_O_U_N_T__V1_
#define __C_H_E_C_K_I_N_G_A_C_C_O_U_N_T__V1_

////@@begin gen include
#include "wxActiveRecord.h"
#include <wx/wx.h>
#include <wx/string.h>
#include <wx/datetime.h>
#include "ACCOUNTLIST_V1.h"
#include "ACCOUNTLIST_V1.h"
#include "PAYEE_V1.h"
#include "SPLITTRANSACTIONS_V1.h"

////@@end gen include

////@@begin custom include
////@@end custom include

////@@begin gen forward
class CHECKINGACCOUNT_V1;
class CHECKINGACCOUNT_V1Row;
class CHECKINGACCOUNT_V1RowSet;

class ACCOUNTLIST_V1;
class ACCOUNTLIST_V1Row;
class ACCOUNTLIST_V1RowSet;
class ACCOUNTLIST_V1;
class ACCOUNTLIST_V1Row;
class ACCOUNTLIST_V1RowSet;
class PAYEE_V1;
class PAYEE_V1Row;
class PAYEE_V1RowSet;
class SPLITTRANSACTIONS_V1;
class SPLITTRANSACTIONS_V1Row;
class SPLITTRANSACTIONS_V1RowSet;

////@@end gen forward

////@@begin custom forward
////@@end custom forward

////@@begin gen arClass
class CHECKINGACCOUNT_V1: public wxSqliteActiveRecord{
protected:
	CHECKINGACCOUNT_V1Row* RowFromResult(DatabaseResultSet* result);
public:
	CHECKINGACCOUNT_V1();
	CHECKINGACCOUNT_V1(const wxString& name,const wxString& server=wxEmptyString,const wxString& user=wxEmptyString,const wxString& password=wxEmptyString,const wxString& table=wxT("CHECKINGACCOUNT_V1"));
	CHECKINGACCOUNT_V1(DatabaseLayer* database,const wxString& table=wxT("CHECKINGACCOUNT_V1"));
	bool Create(const wxString& name,const wxString& server=wxEmptyString,const wxString& user=wxEmptyString,const wxString& password=wxEmptyString,const wxString& table=wxT("CHECKINGACCOUNT_V1"));
	
	CHECKINGACCOUNT_V1Row* New();
	bool Delete(int key);

	
	CHECKINGACCOUNT_V1Row* TRANSID(int key);

	CHECKINGACCOUNT_V1Row* Where(const wxString& whereClause);
	CHECKINGACCOUNT_V1RowSet* WhereSet(const wxString& whereClause,const wxString& orderBy=wxEmptyString);
	CHECKINGACCOUNT_V1RowSet* All(const wxString& orderBy=wxEmptyString); 

////@@begin custom arClass
public:


////@@end custom arClass
};
////@@end gen arClass

////@@begin gen arRow
class CHECKINGACCOUNT_V1Row: public wxActiveRecordRow{
public:
	CHECKINGACCOUNT_V1Row();
	CHECKINGACCOUNT_V1Row(const CHECKINGACCOUNT_V1Row& src);
	CHECKINGACCOUNT_V1Row(CHECKINGACCOUNT_V1* activeRecord);
	CHECKINGACCOUNT_V1Row(DatabaseLayer* database,const wxString& table=wxT("CHECKINGACCOUNT_V1"));
	CHECKINGACCOUNT_V1Row& operator=(const CHECKINGACCOUNT_V1Row& src);
	bool GetFromResult(DatabaseResultSet* result);
public:
	int TRANSAMOUNT;
	wxString TRANSCODE;
	int SUBCATEGID;
	int PAYEEID;
	int TOACCOUNTID;
	int CATEGID;
	wxString NOTES;
	wxString STATUS;
	wxString TRANSACTIONNUMBER;
	int TOTRANSAMOUNT;
	int ACCOUNTID;
	int FOLLOWUPID;
	wxString TRANSDATE;
	int TRANSID;

public:
	ACCOUNTLIST_V1Row* GetACCOUNTLIST_V1();
	ACCOUNTLIST_V1Row* GetACCOUNTLIST_V1();
	PAYEE_V1Row* GetPAYEE_V1();
	SPLITTRANSACTIONS_V1RowSet* GetSPLITTRANSACTIONS_V1s(const wxString& orderBy=wxEmptyString);

	
	bool Save();
	bool Delete();
	
	
////@@begin custom arRow
public:


////@@end custom arRow	

};
////@@end gen arRow

////@@begin gen arSet
class CHECKINGACCOUNT_V1RowSet: public wxActiveRecordRowSet{
public:
	CHECKINGACCOUNT_V1RowSet();
	CHECKINGACCOUNT_V1RowSet(wxActiveRecord* activeRecord);
	CHECKINGACCOUNT_V1RowSet(DatabaseLayer* database,const wxString& table=wxT("CHECKINGACCOUNT_V1"));
	virtual CHECKINGACCOUNT_V1Row* Item(unsigned long item);
	
	virtual bool SaveAll();
	
	
protected:
	static int CMPFUNC_TRANSAMOUNT(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_TRANSCODE(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_SUBCATEGID(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_PAYEEID(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_TOACCOUNTID(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_CATEGID(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_NOTES(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_STATUS(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_TRANSACTIONNUMBER(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_TOTRANSAMOUNT(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_ACCOUNTID(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_FOLLOWUPID(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_TRANSDATE(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_TRANSID(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_global(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	virtual CMPFUNC_proto GetCmpFunc(const wxString& var) const;

////@@begin custom arSet
public:


////@@end custom arSet
};
////@@end gen arSet

#endif /* __C_H_E_C_K_I_N_G_A_C_C_O_U_N_T__V1_ */