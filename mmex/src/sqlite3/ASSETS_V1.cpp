/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////

#include "ASSETS_V1.h"

/** ACTIVE_RECORD **/
ASSETS_V1::ASSETS_V1():wxSqliteActiveRecord(){
}

ASSETS_V1::ASSETS_V1(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table):wxSqliteActiveRecord(name,server,user,password,table){
}

ASSETS_V1::ASSETS_V1(DatabaseLayer* database,const wxString& table):wxSqliteActiveRecord(database,table){
}

bool ASSETS_V1::Create(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table){
	return wxSqliteActiveRecord::Create(name,server,user,password,table);
}

ASSETS_V1Row* ASSETS_V1::RowFromResult(DatabaseResultSet* result){
	ASSETS_V1Row* row=new ASSETS_V1Row(this);
	
	row->GetFromResult(result);
	
	return row;
}

ASSETS_V1Row* ASSETS_V1::New(){
	ASSETS_V1Row* newRow=new ASSETS_V1Row(this);
	garbageRows.Add(newRow);
	return newRow;
}
bool ASSETS_V1::Delete(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE ASSETID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}



ASSETS_V1Row* ASSETS_V1::ASSETID(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("SELECT * FROM %s WHERE ASSETID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		DatabaseResultSet* result= pStatement->ExecuteQuery();

		result->Next();
		ASSETS_V1Row* row=RowFromResult(result);
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return NULL;
	}
}




ASSETS_V1Row* ASSETS_V1::Where(const wxString& whereClause){
	try{
		wxString prepStatement = wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(!result->Next())
			return NULL;
		ASSETS_V1Row* row=RowFromResult(result);
		
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);						
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

ASSETS_V1RowSet* ASSETS_V1::WhereSet(const wxString& whereClause,const wxString& orderBy){
	ASSETS_V1RowSet* rowSet=new ASSETS_V1RowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}


ASSETS_V1RowSet* ASSETS_V1::All(const wxString& orderBy){
	ASSETS_V1RowSet* rowSet=new ASSETS_V1RowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s"),m_table.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

/** END ACTIVE RECORD **/

/** ACTIVE RECORD ROW **/

ASSETS_V1Row::ASSETS_V1Row():wxActiveRecordRow(){
	bool newRow=true;
}

ASSETS_V1Row::ASSETS_V1Row(ASSETS_V1* activeRecord):wxActiveRecordRow(activeRecord){
	bool newRow=true;
}

ASSETS_V1Row::ASSETS_V1Row(const ASSETS_V1Row& src){
	if(&src==this)
		return;
	newRow=src.newRow;
	
	ASSETTYPE=src.ASSETTYPE;
	STARTDATE=src.STARTDATE;
	ASSETID=src.ASSETID;
	NOTES=src.NOTES;
	VALUECHANGERATE=src.VALUECHANGERATE;
	ASSETNAME=src.ASSETNAME;
	VALUECHANGE=src.VALUECHANGE;
	VALUE=src.VALUE;

}

ASSETS_V1Row::ASSETS_V1Row(DatabaseLayer* database,const wxString& table):wxActiveRecordRow(database,table){
	newRow=true;
}
	

ASSETS_V1Row& ASSETS_V1Row::operator=(const ASSETS_V1Row& src){
	if(&src==this)
		return *this;
	newRow=src.newRow;
	
	ASSETTYPE=src.ASSETTYPE;
	STARTDATE=src.STARTDATE;
	ASSETID=src.ASSETID;
	NOTES=src.NOTES;
	VALUECHANGERATE=src.VALUECHANGERATE;
	ASSETNAME=src.ASSETNAME;
	VALUECHANGE=src.VALUECHANGE;
	VALUE=src.VALUE;


	return *this;
}

bool ASSETS_V1Row::GetFromResult(DatabaseResultSet* result){
	
	newRow=false;
		ASSETTYPE=result->GetResultString(wxT("ASSETTYPE"));
	STARTDATE=result->GetResultString(wxT("STARTDATE"));
	ASSETID=result->GetResultInt(wxT("ASSETID"));
	NOTES=result->GetResultString(wxT("NOTES"));
	VALUECHANGERATE=result->GetResultInt(wxT("VALUECHANGERATE"));
	ASSETNAME=result->GetResultString(wxT("ASSETNAME"));
	VALUECHANGE=result->GetResultString(wxT("VALUECHANGE"));
	VALUE=result->GetResultInt(wxT("VALUE"));


	return true;
}
	

bool ASSETS_V1Row::Save(){
	try{
		if(newRow){
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("INSERT INTO %s (ASSETTYPE,STARTDATE,NOTES,VALUECHANGERATE,ASSETNAME,VALUECHANGE,VALUE) VALUES (?,?,?,?,?,?,?)"),m_table.c_str()));
			pStatement->SetParamString(1,ASSETTYPE);
			pStatement->SetParamString(2,STARTDATE);
			pStatement->SetParamString(3,NOTES);
			pStatement->SetParamInt(4,VALUECHANGERATE);
			pStatement->SetParamString(5,ASSETNAME);
			pStatement->SetParamString(6,VALUECHANGE);
			pStatement->SetParamInt(7,VALUE);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

			
			newRow=false;
		}
		else{
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("UPDATE %s SET ASSETTYPE=?,STARTDATE=?,NOTES=?,VALUECHANGERATE=?,ASSETNAME=?,VALUECHANGE=?,VALUE=? WHERE ASSETID=?"),m_table.c_str()));
			pStatement->SetParamString(1,ASSETTYPE);
			pStatement->SetParamString(2,STARTDATE);
			pStatement->SetParamInt(8,ASSETID);
			pStatement->SetParamString(3,NOTES);
			pStatement->SetParamInt(4,VALUECHANGERATE);
			pStatement->SetParamString(5,ASSETNAME);
			pStatement->SetParamString(6,VALUECHANGE);
			pStatement->SetParamInt(7,VALUE);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

		}
		
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		wxActiveRecord::ProcessException(e);
		return false;
	}
}

bool ASSETS_V1Row::Delete(){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE ASSETID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,ASSETID);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}





/** END ACTIVE RECORD ROW **/

/** ACTIVE RECORD ROW SET **/

ASSETS_V1RowSet::ASSETS_V1RowSet():wxActiveRecordRowSet(){
}

ASSETS_V1RowSet::ASSETS_V1RowSet(wxActiveRecord* activeRecord):wxActiveRecordRowSet(activeRecord){
}

ASSETS_V1RowSet::ASSETS_V1RowSet(DatabaseLayer* database,const wxString& table):wxActiveRecordRowSet(database,table){
}

ASSETS_V1Row* ASSETS_V1RowSet::Item(unsigned long item){
	return (ASSETS_V1Row*)wxActiveRecordRowSet::Item(item);
}


bool ASSETS_V1RowSet::SaveAll(){
	try{
		m_database->BeginTransaction();
		for(unsigned long i=0;i<Count();i++)
			Item(i)->Save();
		m_database->Commit();
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		m_database->RollBack();
		wxActiveRecord::ProcessException(e);
		return false;
	}
}


int ASSETS_V1RowSet::CMPFUNC_ASSETTYPE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ASSETS_V1Row** m_item1=(ASSETS_V1Row**)item1;
	ASSETS_V1Row** m_item2=(ASSETS_V1Row**)item2;
	return (*m_item1)->ASSETTYPE.Cmp((*m_item2)->ASSETTYPE);
}

int ASSETS_V1RowSet::CMPFUNC_STARTDATE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ASSETS_V1Row** m_item1=(ASSETS_V1Row**)item1;
	ASSETS_V1Row** m_item2=(ASSETS_V1Row**)item2;
	return (*m_item1)->STARTDATE.Cmp((*m_item2)->STARTDATE);
}

int ASSETS_V1RowSet::CMPFUNC_ASSETID(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ASSETS_V1Row** m_item1=(ASSETS_V1Row**)item1;
	ASSETS_V1Row** m_item2=(ASSETS_V1Row**)item2;
	if((*m_item1)->ASSETID<(*m_item2)->ASSETID)
		return -1;
	else if((*m_item1)->ASSETID>(*m_item2)->ASSETID)
		return 1;
	else
		return 0;
}

int ASSETS_V1RowSet::CMPFUNC_NOTES(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ASSETS_V1Row** m_item1=(ASSETS_V1Row**)item1;
	ASSETS_V1Row** m_item2=(ASSETS_V1Row**)item2;
	return (*m_item1)->NOTES.Cmp((*m_item2)->NOTES);
}

int ASSETS_V1RowSet::CMPFUNC_VALUECHANGERATE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ASSETS_V1Row** m_item1=(ASSETS_V1Row**)item1;
	ASSETS_V1Row** m_item2=(ASSETS_V1Row**)item2;
	if((*m_item1)->VALUECHANGERATE<(*m_item2)->VALUECHANGERATE)
		return -1;
	else if((*m_item1)->VALUECHANGERATE>(*m_item2)->VALUECHANGERATE)
		return 1;
	else
		return 0;
}

int ASSETS_V1RowSet::CMPFUNC_ASSETNAME(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ASSETS_V1Row** m_item1=(ASSETS_V1Row**)item1;
	ASSETS_V1Row** m_item2=(ASSETS_V1Row**)item2;
	return (*m_item1)->ASSETNAME.Cmp((*m_item2)->ASSETNAME);
}

int ASSETS_V1RowSet::CMPFUNC_VALUECHANGE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ASSETS_V1Row** m_item1=(ASSETS_V1Row**)item1;
	ASSETS_V1Row** m_item2=(ASSETS_V1Row**)item2;
	return (*m_item1)->VALUECHANGE.Cmp((*m_item2)->VALUECHANGE);
}

int ASSETS_V1RowSet::CMPFUNC_VALUE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ASSETS_V1Row** m_item1=(ASSETS_V1Row**)item1;
	ASSETS_V1Row** m_item2=(ASSETS_V1Row**)item2;
	if((*m_item1)->VALUE<(*m_item2)->VALUE)
		return -1;
	else if((*m_item1)->VALUE>(*m_item2)->VALUE)
		return 1;
	else
		return 0;
}

CMPFUNC_proto ASSETS_V1RowSet::GetCmpFunc(const wxString& var) const{
	if(var==wxT("ASSETTYPE"))
		return (CMPFUNC_proto)CMPFUNC_ASSETTYPE;
	else if(var==wxT("STARTDATE"))
		return (CMPFUNC_proto)CMPFUNC_STARTDATE;
	else if(var==wxT("ASSETID"))
		return (CMPFUNC_proto)CMPFUNC_ASSETID;
	else if(var==wxT("NOTES"))
		return (CMPFUNC_proto)CMPFUNC_NOTES;
	else if(var==wxT("VALUECHANGERATE"))
		return (CMPFUNC_proto)CMPFUNC_VALUECHANGERATE;
	else if(var==wxT("ASSETNAME"))
		return (CMPFUNC_proto)CMPFUNC_ASSETNAME;
	else if(var==wxT("VALUECHANGE"))
		return (CMPFUNC_proto)CMPFUNC_VALUECHANGE;
	else if(var==wxT("VALUE"))
		return (CMPFUNC_proto)CMPFUNC_VALUE;
	else 
	return (CMPFUNC_proto)CMPFUNC_default;
}



/** END ACTIVE RECORD ROW SET **/

////@@begin custom implementations



////@@end custom implementations