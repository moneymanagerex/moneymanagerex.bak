/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////

#include "BILLSDEPOSITS_V1.h"

/** ACTIVE_RECORD **/
BILLSDEPOSITS_V1::BILLSDEPOSITS_V1():wxSqliteActiveRecord(){
}

BILLSDEPOSITS_V1::BILLSDEPOSITS_V1(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table):wxSqliteActiveRecord(name,server,user,password,table){
}

BILLSDEPOSITS_V1::BILLSDEPOSITS_V1(DatabaseLayer* database,const wxString& table):wxSqliteActiveRecord(database,table){
}

bool BILLSDEPOSITS_V1::Create(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table){
	return wxSqliteActiveRecord::Create(name,server,user,password,table);
}

BILLSDEPOSITS_V1Row* BILLSDEPOSITS_V1::RowFromResult(DatabaseResultSet* result){
	BILLSDEPOSITS_V1Row* row=new BILLSDEPOSITS_V1Row(this);
	
	row->GetFromResult(result);
	
	return row;
}

BILLSDEPOSITS_V1Row* BILLSDEPOSITS_V1::New(){
	BILLSDEPOSITS_V1Row* newRow=new BILLSDEPOSITS_V1Row(this);
	garbageRows.Add(newRow);
	return newRow;
}
bool BILLSDEPOSITS_V1::Delete(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE BDID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}



BILLSDEPOSITS_V1Row* BILLSDEPOSITS_V1::BDID(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("SELECT * FROM %s WHERE BDID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		DatabaseResultSet* result= pStatement->ExecuteQuery();

		result->Next();
		BILLSDEPOSITS_V1Row* row=RowFromResult(result);
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return NULL;
	}
}




BILLSDEPOSITS_V1Row* BILLSDEPOSITS_V1::Where(const wxString& whereClause){
	try{
		wxString prepStatement = wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(!result->Next())
			return NULL;
		BILLSDEPOSITS_V1Row* row=RowFromResult(result);
		
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);						
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

BILLSDEPOSITS_V1RowSet* BILLSDEPOSITS_V1::WhereSet(const wxString& whereClause,const wxString& orderBy){
	BILLSDEPOSITS_V1RowSet* rowSet=new BILLSDEPOSITS_V1RowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}


BILLSDEPOSITS_V1RowSet* BILLSDEPOSITS_V1::All(const wxString& orderBy){
	BILLSDEPOSITS_V1RowSet* rowSet=new BILLSDEPOSITS_V1RowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s"),m_table.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

/** END ACTIVE RECORD **/

/** ACTIVE RECORD ROW **/

BILLSDEPOSITS_V1Row::BILLSDEPOSITS_V1Row():wxActiveRecordRow(){
	bool newRow=true;
}

BILLSDEPOSITS_V1Row::BILLSDEPOSITS_V1Row(BILLSDEPOSITS_V1* activeRecord):wxActiveRecordRow(activeRecord){
	bool newRow=true;
}

BILLSDEPOSITS_V1Row::BILLSDEPOSITS_V1Row(const BILLSDEPOSITS_V1Row& src){
	if(&src==this)
		return;
	newRow=src.newRow;
	
	TRANSAMOUNT=src.TRANSAMOUNT;
	BDID=src.BDID;
	TRANSCODE=src.TRANSCODE;
	SUBCATEGID=src.SUBCATEGID;
	PAYEEID=src.PAYEEID;
	TOACCOUNTID=src.TOACCOUNTID;
	CATEGID=src.CATEGID;
	NOTES=src.NOTES;
	NEXTOCCURRENCEDATE=src.NEXTOCCURRENCEDATE;
	STATUS=src.STATUS;
	TRANSACTIONNUMBER=src.TRANSACTIONNUMBER;
	TOTRANSAMOUNT=src.TOTRANSAMOUNT;
	ACCOUNTID=src.ACCOUNTID;
	FOLLOWUPID=src.FOLLOWUPID;
	TRANSDATE=src.TRANSDATE;
	NUMOCCURRENCES=src.NUMOCCURRENCES;
	REPEATS=src.REPEATS;

}

BILLSDEPOSITS_V1Row::BILLSDEPOSITS_V1Row(DatabaseLayer* database,const wxString& table):wxActiveRecordRow(database,table){
	newRow=true;
}
	

BILLSDEPOSITS_V1Row& BILLSDEPOSITS_V1Row::operator=(const BILLSDEPOSITS_V1Row& src){
	if(&src==this)
		return *this;
	newRow=src.newRow;
	
	TRANSAMOUNT=src.TRANSAMOUNT;
	BDID=src.BDID;
	TRANSCODE=src.TRANSCODE;
	SUBCATEGID=src.SUBCATEGID;
	PAYEEID=src.PAYEEID;
	TOACCOUNTID=src.TOACCOUNTID;
	CATEGID=src.CATEGID;
	NOTES=src.NOTES;
	NEXTOCCURRENCEDATE=src.NEXTOCCURRENCEDATE;
	STATUS=src.STATUS;
	TRANSACTIONNUMBER=src.TRANSACTIONNUMBER;
	TOTRANSAMOUNT=src.TOTRANSAMOUNT;
	ACCOUNTID=src.ACCOUNTID;
	FOLLOWUPID=src.FOLLOWUPID;
	TRANSDATE=src.TRANSDATE;
	NUMOCCURRENCES=src.NUMOCCURRENCES;
	REPEATS=src.REPEATS;


	return *this;
}

bool BILLSDEPOSITS_V1Row::GetFromResult(DatabaseResultSet* result){
	
	newRow=false;
		TRANSAMOUNT=result->GetResultString(wxT("TRANSAMOUNT"));
	BDID=result->GetResultInt(wxT("BDID"));
	TRANSCODE=result->GetResultString(wxT("TRANSCODE"));
	SUBCATEGID=result->GetResultInt(wxT("SUBCATEGID"));
	PAYEEID=result->GetResultInt(wxT("PAYEEID"));
	TOACCOUNTID=result->GetResultInt(wxT("TOACCOUNTID"));
	CATEGID=result->GetResultInt(wxT("CATEGID"));
	NOTES=result->GetResultString(wxT("NOTES"));
	NEXTOCCURRENCEDATE=result->GetResultString(wxT("NEXTOCCURRENCEDATE"));
	STATUS=result->GetResultString(wxT("STATUS"));
	TRANSACTIONNUMBER=result->GetResultString(wxT("TRANSACTIONNUMBER"));
	TOTRANSAMOUNT=result->GetResultString(wxT("TOTRANSAMOUNT"));
	ACCOUNTID=result->GetResultInt(wxT("ACCOUNTID"));
	FOLLOWUPID=result->GetResultInt(wxT("FOLLOWUPID"));
	TRANSDATE=result->GetResultString(wxT("TRANSDATE"));
	NUMOCCURRENCES=result->GetResultString(wxT("NUMOCCURRENCES"));
	REPEATS=result->GetResultString(wxT("REPEATS"));


	return true;
}
	

bool BILLSDEPOSITS_V1Row::Save(){
	try{
		if(newRow){
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("INSERT INTO %s (TRANSAMOUNT,TRANSCODE,SUBCATEGID,PAYEEID,TOACCOUNTID,CATEGID,NOTES,NEXTOCCURRENCEDATE,STATUS,TRANSACTIONNUMBER,TOTRANSAMOUNT,ACCOUNTID,FOLLOWUPID,TRANSDATE,NUMOCCURRENCES,REPEATS) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"),m_table.c_str()));
			pStatement->SetParamString(1,TRANSAMOUNT);
			pStatement->SetParamString(2,TRANSCODE);
			pStatement->SetParamInt(3,SUBCATEGID);
			pStatement->SetParamInt(4,PAYEEID);
			pStatement->SetParamInt(5,TOACCOUNTID);
			pStatement->SetParamInt(6,CATEGID);
			pStatement->SetParamString(7,NOTES);
			pStatement->SetParamString(8,NEXTOCCURRENCEDATE);
			pStatement->SetParamString(9,STATUS);
			pStatement->SetParamString(10,TRANSACTIONNUMBER);
			pStatement->SetParamString(11,TOTRANSAMOUNT);
			pStatement->SetParamInt(12,ACCOUNTID);
			pStatement->SetParamInt(13,FOLLOWUPID);
			pStatement->SetParamString(14,TRANSDATE);
			pStatement->SetParamString(15,NUMOCCURRENCES);
			pStatement->SetParamString(16,REPEATS);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

			
			newRow=false;
		}
		else{
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("UPDATE %s SET TRANSAMOUNT=?,TRANSCODE=?,SUBCATEGID=?,PAYEEID=?,TOACCOUNTID=?,CATEGID=?,NOTES=?,NEXTOCCURRENCEDATE=?,STATUS=?,TRANSACTIONNUMBER=?,TOTRANSAMOUNT=?,ACCOUNTID=?,FOLLOWUPID=?,TRANSDATE=?,NUMOCCURRENCES=?,REPEATS=? WHERE BDID=?"),m_table.c_str()));
			pStatement->SetParamString(1,TRANSAMOUNT);
			pStatement->SetParamInt(17,BDID);
			pStatement->SetParamString(2,TRANSCODE);
			pStatement->SetParamInt(3,SUBCATEGID);
			pStatement->SetParamInt(4,PAYEEID);
			pStatement->SetParamInt(5,TOACCOUNTID);
			pStatement->SetParamInt(6,CATEGID);
			pStatement->SetParamString(7,NOTES);
			pStatement->SetParamString(8,NEXTOCCURRENCEDATE);
			pStatement->SetParamString(9,STATUS);
			pStatement->SetParamString(10,TRANSACTIONNUMBER);
			pStatement->SetParamString(11,TOTRANSAMOUNT);
			pStatement->SetParamInt(12,ACCOUNTID);
			pStatement->SetParamInt(13,FOLLOWUPID);
			pStatement->SetParamString(14,TRANSDATE);
			pStatement->SetParamString(15,NUMOCCURRENCES);
			pStatement->SetParamString(16,REPEATS);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

		}
		
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		wxActiveRecord::ProcessException(e);
		return false;
	}
}

bool BILLSDEPOSITS_V1Row::Delete(){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE BDID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,BDID);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}



ACCOUNTLIST_V1Row* BILLSDEPOSITS_V1Row::GetACCOUNTLIST_V1(){
	ACCOUNTLIST_V1Row* owner= new ACCOUNTLIST_V1Row(m_database,wxT("ACCOUNTLIST_V1"));
	PreparedStatement* pStatement=m_database->PrepareStatement(wxT("SELECT * FROM ACCOUNTLIST_V1 WHERE ACCOUNTID=?"));
	pStatement->SetParamInt(1,ACCOUNTID);
	pStatement->SetParamInt(1,ACCOUNTID);
	DatabaseResultSet* result= pStatement->ExecuteQuery();

	result->Next();
	owner->GetFromResult(result);
	garbageRows.Add(owner);
	m_database->CloseResultSet(result);
	m_database->CloseStatement(pStatement);
	return owner;
}

ACCOUNTLIST_V1Row* BILLSDEPOSITS_V1Row::GetACCOUNTLIST_V1(){
	ACCOUNTLIST_V1Row* owner= new ACCOUNTLIST_V1Row(m_database,wxT("ACCOUNTLIST_V1"));
	PreparedStatement* pStatement=m_database->PrepareStatement(wxT("SELECT * FROM ACCOUNTLIST_V1 WHERE ACCOUNTID=?"));
	pStatement->SetParamInt(1,TOACCOUNTID);
	pStatement->SetParamInt(1,TOACCOUNTID);
	DatabaseResultSet* result= pStatement->ExecuteQuery();

	result->Next();
	owner->GetFromResult(result);
	garbageRows.Add(owner);
	m_database->CloseResultSet(result);
	m_database->CloseStatement(pStatement);
	return owner;
}



/** END ACTIVE RECORD ROW **/

/** ACTIVE RECORD ROW SET **/

BILLSDEPOSITS_V1RowSet::BILLSDEPOSITS_V1RowSet():wxActiveRecordRowSet(){
}

BILLSDEPOSITS_V1RowSet::BILLSDEPOSITS_V1RowSet(wxActiveRecord* activeRecord):wxActiveRecordRowSet(activeRecord){
}

BILLSDEPOSITS_V1RowSet::BILLSDEPOSITS_V1RowSet(DatabaseLayer* database,const wxString& table):wxActiveRecordRowSet(database,table){
}

BILLSDEPOSITS_V1Row* BILLSDEPOSITS_V1RowSet::Item(unsigned long item){
	return (BILLSDEPOSITS_V1Row*)wxActiveRecordRowSet::Item(item);
}


bool BILLSDEPOSITS_V1RowSet::SaveAll(){
	try{
		m_database->BeginTransaction();
		for(unsigned long i=0;i<Count();i++)
			Item(i)->Save();
		m_database->Commit();
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		m_database->RollBack();
		wxActiveRecord::ProcessException(e);
		return false;
	}
}


int BILLSDEPOSITS_V1RowSet::CMPFUNC_TRANSAMOUNT(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	return (*m_item1)->TRANSAMOUNT.Cmp((*m_item2)->TRANSAMOUNT);
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_BDID(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	if((*m_item1)->BDID<(*m_item2)->BDID)
		return -1;
	else if((*m_item1)->BDID>(*m_item2)->BDID)
		return 1;
	else
		return 0;
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_TRANSCODE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	return (*m_item1)->TRANSCODE.Cmp((*m_item2)->TRANSCODE);
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_SUBCATEGID(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	if((*m_item1)->SUBCATEGID<(*m_item2)->SUBCATEGID)
		return -1;
	else if((*m_item1)->SUBCATEGID>(*m_item2)->SUBCATEGID)
		return 1;
	else
		return 0;
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_PAYEEID(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	if((*m_item1)->PAYEEID<(*m_item2)->PAYEEID)
		return -1;
	else if((*m_item1)->PAYEEID>(*m_item2)->PAYEEID)
		return 1;
	else
		return 0;
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_TOACCOUNTID(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	if((*m_item1)->TOACCOUNTID<(*m_item2)->TOACCOUNTID)
		return -1;
	else if((*m_item1)->TOACCOUNTID>(*m_item2)->TOACCOUNTID)
		return 1;
	else
		return 0;
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_CATEGID(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	if((*m_item1)->CATEGID<(*m_item2)->CATEGID)
		return -1;
	else if((*m_item1)->CATEGID>(*m_item2)->CATEGID)
		return 1;
	else
		return 0;
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_NOTES(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	return (*m_item1)->NOTES.Cmp((*m_item2)->NOTES);
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_NEXTOCCURRENCEDATE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	return (*m_item1)->NEXTOCCURRENCEDATE.Cmp((*m_item2)->NEXTOCCURRENCEDATE);
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_STATUS(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	return (*m_item1)->STATUS.Cmp((*m_item2)->STATUS);
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_TRANSACTIONNUMBER(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	return (*m_item1)->TRANSACTIONNUMBER.Cmp((*m_item2)->TRANSACTIONNUMBER);
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_TOTRANSAMOUNT(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	return (*m_item1)->TOTRANSAMOUNT.Cmp((*m_item2)->TOTRANSAMOUNT);
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_ACCOUNTID(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	if((*m_item1)->ACCOUNTID<(*m_item2)->ACCOUNTID)
		return -1;
	else if((*m_item1)->ACCOUNTID>(*m_item2)->ACCOUNTID)
		return 1;
	else
		return 0;
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_FOLLOWUPID(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	if((*m_item1)->FOLLOWUPID<(*m_item2)->FOLLOWUPID)
		return -1;
	else if((*m_item1)->FOLLOWUPID>(*m_item2)->FOLLOWUPID)
		return 1;
	else
		return 0;
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_TRANSDATE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	return (*m_item1)->TRANSDATE.Cmp((*m_item2)->TRANSDATE);
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_NUMOCCURRENCES(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	return (*m_item1)->NUMOCCURRENCES.Cmp((*m_item2)->NUMOCCURRENCES);
}

int BILLSDEPOSITS_V1RowSet::CMPFUNC_REPEATS(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	BILLSDEPOSITS_V1Row** m_item1=(BILLSDEPOSITS_V1Row**)item1;
	BILLSDEPOSITS_V1Row** m_item2=(BILLSDEPOSITS_V1Row**)item2;
	return (*m_item1)->REPEATS.Cmp((*m_item2)->REPEATS);
}

CMPFUNC_proto BILLSDEPOSITS_V1RowSet::GetCmpFunc(const wxString& var) const{
	if(var==wxT("TRANSAMOUNT"))
		return (CMPFUNC_proto)CMPFUNC_TRANSAMOUNT;
	else if(var==wxT("BDID"))
		return (CMPFUNC_proto)CMPFUNC_BDID;
	else if(var==wxT("TRANSCODE"))
		return (CMPFUNC_proto)CMPFUNC_TRANSCODE;
	else if(var==wxT("SUBCATEGID"))
		return (CMPFUNC_proto)CMPFUNC_SUBCATEGID;
	else if(var==wxT("PAYEEID"))
		return (CMPFUNC_proto)CMPFUNC_PAYEEID;
	else if(var==wxT("TOACCOUNTID"))
		return (CMPFUNC_proto)CMPFUNC_TOACCOUNTID;
	else if(var==wxT("CATEGID"))
		return (CMPFUNC_proto)CMPFUNC_CATEGID;
	else if(var==wxT("NOTES"))
		return (CMPFUNC_proto)CMPFUNC_NOTES;
	else if(var==wxT("NEXTOCCURRENCEDATE"))
		return (CMPFUNC_proto)CMPFUNC_NEXTOCCURRENCEDATE;
	else if(var==wxT("STATUS"))
		return (CMPFUNC_proto)CMPFUNC_STATUS;
	else if(var==wxT("TRANSACTIONNUMBER"))
		return (CMPFUNC_proto)CMPFUNC_TRANSACTIONNUMBER;
	else if(var==wxT("TOTRANSAMOUNT"))
		return (CMPFUNC_proto)CMPFUNC_TOTRANSAMOUNT;
	else if(var==wxT("ACCOUNTID"))
		return (CMPFUNC_proto)CMPFUNC_ACCOUNTID;
	else if(var==wxT("FOLLOWUPID"))
		return (CMPFUNC_proto)CMPFUNC_FOLLOWUPID;
	else if(var==wxT("TRANSDATE"))
		return (CMPFUNC_proto)CMPFUNC_TRANSDATE;
	else if(var==wxT("NUMOCCURRENCES"))
		return (CMPFUNC_proto)CMPFUNC_NUMOCCURRENCES;
	else if(var==wxT("REPEATS"))
		return (CMPFUNC_proto)CMPFUNC_REPEATS;
	else 
	return (CMPFUNC_proto)CMPFUNC_default;
}



/** END ACTIVE RECORD ROW SET **/

////@@begin custom implementations



////@@end custom implementations