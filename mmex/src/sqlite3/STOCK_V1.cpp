/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////

#include "STOCK_V1.h"

/** ACTIVE_RECORD **/
STOCK_V1::STOCK_V1():wxSqliteActiveRecord(){
}

STOCK_V1::STOCK_V1(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table):wxSqliteActiveRecord(name,server,user,password,table){
}

STOCK_V1::STOCK_V1(DatabaseLayer* database,const wxString& table):wxSqliteActiveRecord(database,table){
}

bool STOCK_V1::Create(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table){
	return wxSqliteActiveRecord::Create(name,server,user,password,table);
}

STOCK_V1Row* STOCK_V1::RowFromResult(DatabaseResultSet* result){
	STOCK_V1Row* row=new STOCK_V1Row(this);
	
	row->GetFromResult(result);
	
	return row;
}

STOCK_V1Row* STOCK_V1::New(){
	STOCK_V1Row* newRow=new STOCK_V1Row(this);
	garbageRows.Add(newRow);
	return newRow;
}
bool STOCK_V1::Delete(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE STOCKID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}



STOCK_V1Row* STOCK_V1::STOCKID(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("SELECT * FROM %s WHERE STOCKID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		DatabaseResultSet* result= pStatement->ExecuteQuery();

		result->Next();
		STOCK_V1Row* row=RowFromResult(result);
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return NULL;
	}
}




STOCK_V1Row* STOCK_V1::Where(const wxString& whereClause){
	try{
		wxString prepStatement = wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(!result->Next())
			return NULL;
		STOCK_V1Row* row=RowFromResult(result);
		
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);						
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

STOCK_V1RowSet* STOCK_V1::WhereSet(const wxString& whereClause,const wxString& orderBy){
	STOCK_V1RowSet* rowSet=new STOCK_V1RowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}


STOCK_V1RowSet* STOCK_V1::All(const wxString& orderBy){
	STOCK_V1RowSet* rowSet=new STOCK_V1RowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s"),m_table.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

/** END ACTIVE RECORD **/

/** ACTIVE RECORD ROW **/

STOCK_V1Row::STOCK_V1Row():wxActiveRecordRow(){
	bool newRow=true;
}

STOCK_V1Row::STOCK_V1Row(STOCK_V1* activeRecord):wxActiveRecordRow(activeRecord){
	bool newRow=true;
}

STOCK_V1Row::STOCK_V1Row(const STOCK_V1Row& src){
	if(&src==this)
		return;
	newRow=src.newRow;
	
	NUMSHARES=src.NUMSHARES;
	SYMBOL=src.SYMBOL;
	HELDAT=src.HELDAT;
	NOTES=src.NOTES;
	STOCKID=src.STOCKID;
	STOCKNAME=src.STOCKNAME;
	PURCHASEPRICE=src.PURCHASEPRICE;
	CURRENTPRICE=src.CURRENTPRICE;
	COMMISSION=src.COMMISSION;
	PURCHASEDATE=src.PURCHASEDATE;
	VALUE=src.VALUE;

}

STOCK_V1Row::STOCK_V1Row(DatabaseLayer* database,const wxString& table):wxActiveRecordRow(database,table){
	newRow=true;
}
	

STOCK_V1Row& STOCK_V1Row::operator=(const STOCK_V1Row& src){
	if(&src==this)
		return *this;
	newRow=src.newRow;
	
	NUMSHARES=src.NUMSHARES;
	SYMBOL=src.SYMBOL;
	HELDAT=src.HELDAT;
	NOTES=src.NOTES;
	STOCKID=src.STOCKID;
	STOCKNAME=src.STOCKNAME;
	PURCHASEPRICE=src.PURCHASEPRICE;
	CURRENTPRICE=src.CURRENTPRICE;
	COMMISSION=src.COMMISSION;
	PURCHASEDATE=src.PURCHASEDATE;
	VALUE=src.VALUE;


	return *this;
}

bool STOCK_V1Row::GetFromResult(DatabaseResultSet* result){
	
	newRow=false;
		NUMSHARES=result->GetResultString(wxT("NUMSHARES"));
	SYMBOL=result->GetResultString(wxT("SYMBOL"));
	HELDAT=result->GetResultString(wxT("HELDAT"));
	NOTES=result->GetResultString(wxT("NOTES"));
	STOCKID=result->GetResultInt(wxT("STOCKID"));
	STOCKNAME=result->GetResultString(wxT("STOCKNAME"));
	PURCHASEPRICE=result->GetResultString(wxT("PURCHASEPRICE"));
	CURRENTPRICE=result->GetResultString(wxT("CURRENTPRICE"));
	COMMISSION=result->GetResultString(wxT("COMMISSION"));
	PURCHASEDATE=result->GetResultString(wxT("PURCHASEDATE"));
	VALUE=result->GetResultString(wxT("VALUE"));


	return true;
}
	

bool STOCK_V1Row::Save(){
	try{
		if(newRow){
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("INSERT INTO %s (NUMSHARES,SYMBOL,HELDAT,NOTES,STOCKNAME,PURCHASEPRICE,CURRENTPRICE,COMMISSION,PURCHASEDATE,VALUE) VALUES (?,?,?,?,?,?,?,?,?,?)"),m_table.c_str()));
			pStatement->SetParamString(1,NUMSHARES);
			pStatement->SetParamString(2,SYMBOL);
			pStatement->SetParamString(3,HELDAT);
			pStatement->SetParamString(4,NOTES);
			pStatement->SetParamString(5,STOCKNAME);
			pStatement->SetParamString(6,PURCHASEPRICE);
			pStatement->SetParamString(7,CURRENTPRICE);
			pStatement->SetParamString(8,COMMISSION);
			pStatement->SetParamString(9,PURCHASEDATE);
			pStatement->SetParamString(10,VALUE);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

			
			newRow=false;
		}
		else{
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("UPDATE %s SET NUMSHARES=?,SYMBOL=?,HELDAT=?,NOTES=?,STOCKNAME=?,PURCHASEPRICE=?,CURRENTPRICE=?,COMMISSION=?,PURCHASEDATE=?,VALUE=? WHERE STOCKID=?"),m_table.c_str()));
			pStatement->SetParamString(1,NUMSHARES);
			pStatement->SetParamString(2,SYMBOL);
			pStatement->SetParamString(3,HELDAT);
			pStatement->SetParamString(4,NOTES);
			pStatement->SetParamInt(11,STOCKID);
			pStatement->SetParamString(5,STOCKNAME);
			pStatement->SetParamString(6,PURCHASEPRICE);
			pStatement->SetParamString(7,CURRENTPRICE);
			pStatement->SetParamString(8,COMMISSION);
			pStatement->SetParamString(9,PURCHASEDATE);
			pStatement->SetParamString(10,VALUE);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

		}
		
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		wxActiveRecord::ProcessException(e);
		return false;
	}
}

bool STOCK_V1Row::Delete(){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE STOCKID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,STOCKID);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}





/** END ACTIVE RECORD ROW **/

/** ACTIVE RECORD ROW SET **/

STOCK_V1RowSet::STOCK_V1RowSet():wxActiveRecordRowSet(){
}

STOCK_V1RowSet::STOCK_V1RowSet(wxActiveRecord* activeRecord):wxActiveRecordRowSet(activeRecord){
}

STOCK_V1RowSet::STOCK_V1RowSet(DatabaseLayer* database,const wxString& table):wxActiveRecordRowSet(database,table){
}

STOCK_V1Row* STOCK_V1RowSet::Item(unsigned long item){
	return (STOCK_V1Row*)wxActiveRecordRowSet::Item(item);
}


bool STOCK_V1RowSet::SaveAll(){
	try{
		m_database->BeginTransaction();
		for(unsigned long i=0;i<Count();i++)
			Item(i)->Save();
		m_database->Commit();
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		m_database->RollBack();
		wxActiveRecord::ProcessException(e);
		return false;
	}
}


int STOCK_V1RowSet::CMPFUNC_NUMSHARES(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	STOCK_V1Row** m_item1=(STOCK_V1Row**)item1;
	STOCK_V1Row** m_item2=(STOCK_V1Row**)item2;
	return (*m_item1)->NUMSHARES.Cmp((*m_item2)->NUMSHARES);
}

int STOCK_V1RowSet::CMPFUNC_SYMBOL(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	STOCK_V1Row** m_item1=(STOCK_V1Row**)item1;
	STOCK_V1Row** m_item2=(STOCK_V1Row**)item2;
	return (*m_item1)->SYMBOL.Cmp((*m_item2)->SYMBOL);
}

int STOCK_V1RowSet::CMPFUNC_HELDAT(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	STOCK_V1Row** m_item1=(STOCK_V1Row**)item1;
	STOCK_V1Row** m_item2=(STOCK_V1Row**)item2;
	return (*m_item1)->HELDAT.Cmp((*m_item2)->HELDAT);
}

int STOCK_V1RowSet::CMPFUNC_NOTES(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	STOCK_V1Row** m_item1=(STOCK_V1Row**)item1;
	STOCK_V1Row** m_item2=(STOCK_V1Row**)item2;
	return (*m_item1)->NOTES.Cmp((*m_item2)->NOTES);
}

int STOCK_V1RowSet::CMPFUNC_STOCKID(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	STOCK_V1Row** m_item1=(STOCK_V1Row**)item1;
	STOCK_V1Row** m_item2=(STOCK_V1Row**)item2;
	if((*m_item1)->STOCKID<(*m_item2)->STOCKID)
		return -1;
	else if((*m_item1)->STOCKID>(*m_item2)->STOCKID)
		return 1;
	else
		return 0;
}

int STOCK_V1RowSet::CMPFUNC_STOCKNAME(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	STOCK_V1Row** m_item1=(STOCK_V1Row**)item1;
	STOCK_V1Row** m_item2=(STOCK_V1Row**)item2;
	return (*m_item1)->STOCKNAME.Cmp((*m_item2)->STOCKNAME);
}

int STOCK_V1RowSet::CMPFUNC_PURCHASEPRICE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	STOCK_V1Row** m_item1=(STOCK_V1Row**)item1;
	STOCK_V1Row** m_item2=(STOCK_V1Row**)item2;
	return (*m_item1)->PURCHASEPRICE.Cmp((*m_item2)->PURCHASEPRICE);
}

int STOCK_V1RowSet::CMPFUNC_CURRENTPRICE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	STOCK_V1Row** m_item1=(STOCK_V1Row**)item1;
	STOCK_V1Row** m_item2=(STOCK_V1Row**)item2;
	return (*m_item1)->CURRENTPRICE.Cmp((*m_item2)->CURRENTPRICE);
}

int STOCK_V1RowSet::CMPFUNC_COMMISSION(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	STOCK_V1Row** m_item1=(STOCK_V1Row**)item1;
	STOCK_V1Row** m_item2=(STOCK_V1Row**)item2;
	return (*m_item1)->COMMISSION.Cmp((*m_item2)->COMMISSION);
}

int STOCK_V1RowSet::CMPFUNC_PURCHASEDATE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	STOCK_V1Row** m_item1=(STOCK_V1Row**)item1;
	STOCK_V1Row** m_item2=(STOCK_V1Row**)item2;
	return (*m_item1)->PURCHASEDATE.Cmp((*m_item2)->PURCHASEDATE);
}

int STOCK_V1RowSet::CMPFUNC_VALUE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	STOCK_V1Row** m_item1=(STOCK_V1Row**)item1;
	STOCK_V1Row** m_item2=(STOCK_V1Row**)item2;
	return (*m_item1)->VALUE.Cmp((*m_item2)->VALUE);
}

CMPFUNC_proto STOCK_V1RowSet::GetCmpFunc(const wxString& var) const{
	if(var==wxT("NUMSHARES"))
		return (CMPFUNC_proto)CMPFUNC_NUMSHARES;
	else if(var==wxT("SYMBOL"))
		return (CMPFUNC_proto)CMPFUNC_SYMBOL;
	else if(var==wxT("HELDAT"))
		return (CMPFUNC_proto)CMPFUNC_HELDAT;
	else if(var==wxT("NOTES"))
		return (CMPFUNC_proto)CMPFUNC_NOTES;
	else if(var==wxT("STOCKID"))
		return (CMPFUNC_proto)CMPFUNC_STOCKID;
	else if(var==wxT("STOCKNAME"))
		return (CMPFUNC_proto)CMPFUNC_STOCKNAME;
	else if(var==wxT("PURCHASEPRICE"))
		return (CMPFUNC_proto)CMPFUNC_PURCHASEPRICE;
	else if(var==wxT("CURRENTPRICE"))
		return (CMPFUNC_proto)CMPFUNC_CURRENTPRICE;
	else if(var==wxT("COMMISSION"))
		return (CMPFUNC_proto)CMPFUNC_COMMISSION;
	else if(var==wxT("PURCHASEDATE"))
		return (CMPFUNC_proto)CMPFUNC_PURCHASEDATE;
	else if(var==wxT("VALUE"))
		return (CMPFUNC_proto)CMPFUNC_VALUE;
	else 
	return (CMPFUNC_proto)CMPFUNC_default;
}



/** END ACTIVE RECORD ROW SET **/

////@@begin custom implementations



////@@end custom implementations