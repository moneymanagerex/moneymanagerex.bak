/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////

#include "CURRENCYFORMATS_V1.h"

/** ACTIVE_RECORD **/
CURRENCYFORMATS_V1::CURRENCYFORMATS_V1():wxSqliteActiveRecord(){
}

CURRENCYFORMATS_V1::CURRENCYFORMATS_V1(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table):wxSqliteActiveRecord(name,server,user,password,table){
}

CURRENCYFORMATS_V1::CURRENCYFORMATS_V1(DatabaseLayer* database,const wxString& table):wxSqliteActiveRecord(database,table){
}

bool CURRENCYFORMATS_V1::Create(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table){
	return wxSqliteActiveRecord::Create(name,server,user,password,table);
}

CURRENCYFORMATS_V1Row* CURRENCYFORMATS_V1::RowFromResult(DatabaseResultSet* result){
	CURRENCYFORMATS_V1Row* row=new CURRENCYFORMATS_V1Row(this);
	
	row->GetFromResult(result);
	
	return row;
}

CURRENCYFORMATS_V1Row* CURRENCYFORMATS_V1::New(){
	CURRENCYFORMATS_V1Row* newRow=new CURRENCYFORMATS_V1Row(this);
	garbageRows.Add(newRow);
	return newRow;
}
bool CURRENCYFORMATS_V1::Delete(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE CURRENCYID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}



CURRENCYFORMATS_V1Row* CURRENCYFORMATS_V1::CURRENCYID(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("SELECT * FROM %s WHERE CURRENCYID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		DatabaseResultSet* result= pStatement->ExecuteQuery();

		result->Next();
		CURRENCYFORMATS_V1Row* row=RowFromResult(result);
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return NULL;
	}
}




CURRENCYFORMATS_V1Row* CURRENCYFORMATS_V1::Where(const wxString& whereClause){
	try{
		wxString prepStatement = wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(!result->Next())
			return NULL;
		CURRENCYFORMATS_V1Row* row=RowFromResult(result);
		
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);						
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

CURRENCYFORMATS_V1RowSet* CURRENCYFORMATS_V1::WhereSet(const wxString& whereClause,const wxString& orderBy){
	CURRENCYFORMATS_V1RowSet* rowSet=new CURRENCYFORMATS_V1RowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}


CURRENCYFORMATS_V1RowSet* CURRENCYFORMATS_V1::All(const wxString& orderBy){
	CURRENCYFORMATS_V1RowSet* rowSet=new CURRENCYFORMATS_V1RowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s"),m_table.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

/** END ACTIVE RECORD **/

/** ACTIVE RECORD ROW **/

CURRENCYFORMATS_V1Row::CURRENCYFORMATS_V1Row():wxActiveRecordRow(){
	bool newRow=true;
}

CURRENCYFORMATS_V1Row::CURRENCYFORMATS_V1Row(CURRENCYFORMATS_V1* activeRecord):wxActiveRecordRow(activeRecord){
	bool newRow=true;
}

CURRENCYFORMATS_V1Row::CURRENCYFORMATS_V1Row(const CURRENCYFORMATS_V1Row& src){
	if(&src==this)
		return;
	newRow=src.newRow;
	
	BASECONVRATE=src.BASECONVRATE;
	CURRENCYNAME=src.CURRENCYNAME;
	SCALE=src.SCALE;
	CENT_NAME=src.CENT_NAME;
	DECIMAL_POINT=src.DECIMAL_POINT;
	CURRENCYID=src.CURRENCYID;
	GROUP_SEPARATOR=src.GROUP_SEPARATOR;
	CURRENCY_SYMBOL=src.CURRENCY_SYMBOL;
	SFX_SYMBOL=src.SFX_SYMBOL;
	PFX_SYMBOL=src.PFX_SYMBOL;
	UNIT_NAME=src.UNIT_NAME;

}

CURRENCYFORMATS_V1Row::CURRENCYFORMATS_V1Row(DatabaseLayer* database,const wxString& table):wxActiveRecordRow(database,table){
	newRow=true;
}
	

CURRENCYFORMATS_V1Row& CURRENCYFORMATS_V1Row::operator=(const CURRENCYFORMATS_V1Row& src){
	if(&src==this)
		return *this;
	newRow=src.newRow;
	
	BASECONVRATE=src.BASECONVRATE;
	CURRENCYNAME=src.CURRENCYNAME;
	SCALE=src.SCALE;
	CENT_NAME=src.CENT_NAME;
	DECIMAL_POINT=src.DECIMAL_POINT;
	CURRENCYID=src.CURRENCYID;
	GROUP_SEPARATOR=src.GROUP_SEPARATOR;
	CURRENCY_SYMBOL=src.CURRENCY_SYMBOL;
	SFX_SYMBOL=src.SFX_SYMBOL;
	PFX_SYMBOL=src.PFX_SYMBOL;
	UNIT_NAME=src.UNIT_NAME;


	return *this;
}

bool CURRENCYFORMATS_V1Row::GetFromResult(DatabaseResultSet* result){
	
	newRow=false;
		BASECONVRATE=result->GetResultInt(wxT("BASECONVRATE"));
	CURRENCYNAME=result->GetResultString(wxT("CURRENCYNAME"));
	SCALE=result->GetResultInt(wxT("SCALE"));
	CENT_NAME=result->GetResultString(wxT("CENT_NAME"));
	DECIMAL_POINT=result->GetResultString(wxT("DECIMAL_POINT"));
	CURRENCYID=result->GetResultInt(wxT("CURRENCYID"));
	GROUP_SEPARATOR=result->GetResultString(wxT("GROUP_SEPARATOR"));
	CURRENCY_SYMBOL=result->GetResultString(wxT("CURRENCY_SYMBOL"));
	SFX_SYMBOL=result->GetResultString(wxT("SFX_SYMBOL"));
	PFX_SYMBOL=result->GetResultString(wxT("PFX_SYMBOL"));
	UNIT_NAME=result->GetResultString(wxT("UNIT_NAME"));


	return true;
}
	

bool CURRENCYFORMATS_V1Row::Save(){
	try{
		if(newRow){
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("INSERT INTO %s (BASECONVRATE,CURRENCYNAME,SCALE,CENT_NAME,DECIMAL_POINT,GROUP_SEPARATOR,CURRENCY_SYMBOL,SFX_SYMBOL,PFX_SYMBOL,UNIT_NAME) VALUES (?,?,?,?,?,?,?,?,?,?)"),m_table.c_str()));
			pStatement->SetParamInt(1,BASECONVRATE);
			pStatement->SetParamString(2,CURRENCYNAME);
			pStatement->SetParamInt(3,SCALE);
			pStatement->SetParamString(4,CENT_NAME);
			pStatement->SetParamString(5,DECIMAL_POINT);
			pStatement->SetParamString(6,GROUP_SEPARATOR);
			pStatement->SetParamString(7,CURRENCY_SYMBOL);
			pStatement->SetParamString(8,SFX_SYMBOL);
			pStatement->SetParamString(9,PFX_SYMBOL);
			pStatement->SetParamString(10,UNIT_NAME);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

			
			newRow=false;
		}
		else{
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("UPDATE %s SET BASECONVRATE=?,CURRENCYNAME=?,SCALE=?,CENT_NAME=?,DECIMAL_POINT=?,GROUP_SEPARATOR=?,CURRENCY_SYMBOL=?,SFX_SYMBOL=?,PFX_SYMBOL=?,UNIT_NAME=? WHERE CURRENCYID=?"),m_table.c_str()));
			pStatement->SetParamInt(1,BASECONVRATE);
			pStatement->SetParamString(2,CURRENCYNAME);
			pStatement->SetParamInt(3,SCALE);
			pStatement->SetParamString(4,CENT_NAME);
			pStatement->SetParamString(5,DECIMAL_POINT);
			pStatement->SetParamInt(11,CURRENCYID);
			pStatement->SetParamString(6,GROUP_SEPARATOR);
			pStatement->SetParamString(7,CURRENCY_SYMBOL);
			pStatement->SetParamString(8,SFX_SYMBOL);
			pStatement->SetParamString(9,PFX_SYMBOL);
			pStatement->SetParamString(10,UNIT_NAME);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

		}
		
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		wxActiveRecord::ProcessException(e);
		return false;
	}
}

bool CURRENCYFORMATS_V1Row::Delete(){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE CURRENCYID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,CURRENCYID);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}





/** END ACTIVE RECORD ROW **/

/** ACTIVE RECORD ROW SET **/

CURRENCYFORMATS_V1RowSet::CURRENCYFORMATS_V1RowSet():wxActiveRecordRowSet(){
}

CURRENCYFORMATS_V1RowSet::CURRENCYFORMATS_V1RowSet(wxActiveRecord* activeRecord):wxActiveRecordRowSet(activeRecord){
}

CURRENCYFORMATS_V1RowSet::CURRENCYFORMATS_V1RowSet(DatabaseLayer* database,const wxString& table):wxActiveRecordRowSet(database,table){
}

CURRENCYFORMATS_V1Row* CURRENCYFORMATS_V1RowSet::Item(unsigned long item){
	return (CURRENCYFORMATS_V1Row*)wxActiveRecordRowSet::Item(item);
}


bool CURRENCYFORMATS_V1RowSet::SaveAll(){
	try{
		m_database->BeginTransaction();
		for(unsigned long i=0;i<Count();i++)
			Item(i)->Save();
		m_database->Commit();
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		m_database->RollBack();
		wxActiveRecord::ProcessException(e);
		return false;
	}
}


int CURRENCYFORMATS_V1RowSet::CMPFUNC_BASECONVRATE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	CURRENCYFORMATS_V1Row** m_item1=(CURRENCYFORMATS_V1Row**)item1;
	CURRENCYFORMATS_V1Row** m_item2=(CURRENCYFORMATS_V1Row**)item2;
	if((*m_item1)->BASECONVRATE<(*m_item2)->BASECONVRATE)
		return -1;
	else if((*m_item1)->BASECONVRATE>(*m_item2)->BASECONVRATE)
		return 1;
	else
		return 0;
}

int CURRENCYFORMATS_V1RowSet::CMPFUNC_CURRENCYNAME(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	CURRENCYFORMATS_V1Row** m_item1=(CURRENCYFORMATS_V1Row**)item1;
	CURRENCYFORMATS_V1Row** m_item2=(CURRENCYFORMATS_V1Row**)item2;
	return (*m_item1)->CURRENCYNAME.Cmp((*m_item2)->CURRENCYNAME);
}

int CURRENCYFORMATS_V1RowSet::CMPFUNC_SCALE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	CURRENCYFORMATS_V1Row** m_item1=(CURRENCYFORMATS_V1Row**)item1;
	CURRENCYFORMATS_V1Row** m_item2=(CURRENCYFORMATS_V1Row**)item2;
	if((*m_item1)->SCALE<(*m_item2)->SCALE)
		return -1;
	else if((*m_item1)->SCALE>(*m_item2)->SCALE)
		return 1;
	else
		return 0;
}

int CURRENCYFORMATS_V1RowSet::CMPFUNC_CENT_NAME(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	CURRENCYFORMATS_V1Row** m_item1=(CURRENCYFORMATS_V1Row**)item1;
	CURRENCYFORMATS_V1Row** m_item2=(CURRENCYFORMATS_V1Row**)item2;
	return (*m_item1)->CENT_NAME.Cmp((*m_item2)->CENT_NAME);
}

int CURRENCYFORMATS_V1RowSet::CMPFUNC_DECIMAL_POINT(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	CURRENCYFORMATS_V1Row** m_item1=(CURRENCYFORMATS_V1Row**)item1;
	CURRENCYFORMATS_V1Row** m_item2=(CURRENCYFORMATS_V1Row**)item2;
	return (*m_item1)->DECIMAL_POINT.Cmp((*m_item2)->DECIMAL_POINT);
}

int CURRENCYFORMATS_V1RowSet::CMPFUNC_CURRENCYID(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	CURRENCYFORMATS_V1Row** m_item1=(CURRENCYFORMATS_V1Row**)item1;
	CURRENCYFORMATS_V1Row** m_item2=(CURRENCYFORMATS_V1Row**)item2;
	if((*m_item1)->CURRENCYID<(*m_item2)->CURRENCYID)
		return -1;
	else if((*m_item1)->CURRENCYID>(*m_item2)->CURRENCYID)
		return 1;
	else
		return 0;
}

int CURRENCYFORMATS_V1RowSet::CMPFUNC_GROUP_SEPARATOR(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	CURRENCYFORMATS_V1Row** m_item1=(CURRENCYFORMATS_V1Row**)item1;
	CURRENCYFORMATS_V1Row** m_item2=(CURRENCYFORMATS_V1Row**)item2;
	return (*m_item1)->GROUP_SEPARATOR.Cmp((*m_item2)->GROUP_SEPARATOR);
}

int CURRENCYFORMATS_V1RowSet::CMPFUNC_CURRENCY_SYMBOL(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	CURRENCYFORMATS_V1Row** m_item1=(CURRENCYFORMATS_V1Row**)item1;
	CURRENCYFORMATS_V1Row** m_item2=(CURRENCYFORMATS_V1Row**)item2;
	return (*m_item1)->CURRENCY_SYMBOL.Cmp((*m_item2)->CURRENCY_SYMBOL);
}

int CURRENCYFORMATS_V1RowSet::CMPFUNC_SFX_SYMBOL(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	CURRENCYFORMATS_V1Row** m_item1=(CURRENCYFORMATS_V1Row**)item1;
	CURRENCYFORMATS_V1Row** m_item2=(CURRENCYFORMATS_V1Row**)item2;
	return (*m_item1)->SFX_SYMBOL.Cmp((*m_item2)->SFX_SYMBOL);
}

int CURRENCYFORMATS_V1RowSet::CMPFUNC_PFX_SYMBOL(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	CURRENCYFORMATS_V1Row** m_item1=(CURRENCYFORMATS_V1Row**)item1;
	CURRENCYFORMATS_V1Row** m_item2=(CURRENCYFORMATS_V1Row**)item2;
	return (*m_item1)->PFX_SYMBOL.Cmp((*m_item2)->PFX_SYMBOL);
}

int CURRENCYFORMATS_V1RowSet::CMPFUNC_UNIT_NAME(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	CURRENCYFORMATS_V1Row** m_item1=(CURRENCYFORMATS_V1Row**)item1;
	CURRENCYFORMATS_V1Row** m_item2=(CURRENCYFORMATS_V1Row**)item2;
	return (*m_item1)->UNIT_NAME.Cmp((*m_item2)->UNIT_NAME);
}

CMPFUNC_proto CURRENCYFORMATS_V1RowSet::GetCmpFunc(const wxString& var) const{
	if(var==wxT("BASECONVRATE"))
		return (CMPFUNC_proto)CMPFUNC_BASECONVRATE;
	else if(var==wxT("CURRENCYNAME"))
		return (CMPFUNC_proto)CMPFUNC_CURRENCYNAME;
	else if(var==wxT("SCALE"))
		return (CMPFUNC_proto)CMPFUNC_SCALE;
	else if(var==wxT("CENT_NAME"))
		return (CMPFUNC_proto)CMPFUNC_CENT_NAME;
	else if(var==wxT("DECIMAL_POINT"))
		return (CMPFUNC_proto)CMPFUNC_DECIMAL_POINT;
	else if(var==wxT("CURRENCYID"))
		return (CMPFUNC_proto)CMPFUNC_CURRENCYID;
	else if(var==wxT("GROUP_SEPARATOR"))
		return (CMPFUNC_proto)CMPFUNC_GROUP_SEPARATOR;
	else if(var==wxT("CURRENCY_SYMBOL"))
		return (CMPFUNC_proto)CMPFUNC_CURRENCY_SYMBOL;
	else if(var==wxT("SFX_SYMBOL"))
		return (CMPFUNC_proto)CMPFUNC_SFX_SYMBOL;
	else if(var==wxT("PFX_SYMBOL"))
		return (CMPFUNC_proto)CMPFUNC_PFX_SYMBOL;
	else if(var==wxT("UNIT_NAME"))
		return (CMPFUNC_proto)CMPFUNC_UNIT_NAME;
	else 
	return (CMPFUNC_proto)CMPFUNC_default;
}



/** END ACTIVE RECORD ROW SET **/

////@@begin custom implementations



////@@end custom implementations