/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////

#include "ACCOUNTLIST_V1.h"

/** ACTIVE_RECORD **/
ACCOUNTLIST_V1::ACCOUNTLIST_V1():wxSqliteActiveRecord(){
}

ACCOUNTLIST_V1::ACCOUNTLIST_V1(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table):wxSqliteActiveRecord(name,server,user,password,table){
}

ACCOUNTLIST_V1::ACCOUNTLIST_V1(DatabaseLayer* database,const wxString& table):wxSqliteActiveRecord(database,table){
}

bool ACCOUNTLIST_V1::Create(const wxString& name,const wxString& server,const wxString& user,const wxString& password,const wxString& table){
	return wxSqliteActiveRecord::Create(name,server,user,password,table);
}

ACCOUNTLIST_V1Row* ACCOUNTLIST_V1::RowFromResult(DatabaseResultSet* result){
	ACCOUNTLIST_V1Row* row=new ACCOUNTLIST_V1Row(this);
	
	row->GetFromResult(result);
	
	return row;
}

ACCOUNTLIST_V1Row* ACCOUNTLIST_V1::New(){
	ACCOUNTLIST_V1Row* newRow=new ACCOUNTLIST_V1Row(this);
	garbageRows.Add(newRow);
	return newRow;
}
bool ACCOUNTLIST_V1::Delete(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE ACCOUNTID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}



ACCOUNTLIST_V1Row* ACCOUNTLIST_V1::ACCOUNTID(int key){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("SELECT * FROM %s WHERE ACCOUNTID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,key);
		DatabaseResultSet* result= pStatement->ExecuteQuery();

		result->Next();
		ACCOUNTLIST_V1Row* row=RowFromResult(result);
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return NULL;
	}
}




ACCOUNTLIST_V1Row* ACCOUNTLIST_V1::Where(const wxString& whereClause){
	try{
		wxString prepStatement = wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(!result->Next())
			return NULL;
		ACCOUNTLIST_V1Row* row=RowFromResult(result);
		
		garbageRows.Add(row);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);						
		return row;
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

ACCOUNTLIST_V1RowSet* ACCOUNTLIST_V1::WhereSet(const wxString& whereClause,const wxString& orderBy){
	ACCOUNTLIST_V1RowSet* rowSet=new ACCOUNTLIST_V1RowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s WHERE %s"),m_table.c_str(),whereClause.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}


ACCOUNTLIST_V1RowSet* ACCOUNTLIST_V1::All(const wxString& orderBy){
	ACCOUNTLIST_V1RowSet* rowSet=new ACCOUNTLIST_V1RowSet();
	try{
		wxString prepStatement=wxString::Format(wxT("SELECT * FROM %s"),m_table.c_str());
		if(!orderBy.IsEmpty())
			prepStatement+=wxT(" ORDER BY ")+orderBy;
		PreparedStatement* pStatement=m_database->PrepareStatement(prepStatement);
		
		DatabaseResultSet* result= pStatement->ExecuteQuery();
		
		if(result){
			while(result->Next()){
				rowSet->Add(RowFromResult(result));
			}
		}
		garbageRowSets.Add(rowSet);
		m_database->CloseResultSet(result);
		m_database->CloseStatement(pStatement);	
		return rowSet;
		
	}
	catch (DatabaseLayerException& e)
	{
		ProcessException(e);
		return 0;
	}
}

/** END ACTIVE RECORD **/

/** ACTIVE RECORD ROW **/

ACCOUNTLIST_V1Row::ACCOUNTLIST_V1Row():wxActiveRecordRow(){
	bool newRow=true;
}

ACCOUNTLIST_V1Row::ACCOUNTLIST_V1Row(ACCOUNTLIST_V1* activeRecord):wxActiveRecordRow(activeRecord){
	bool newRow=true;
}

ACCOUNTLIST_V1Row::ACCOUNTLIST_V1Row(const ACCOUNTLIST_V1Row& src){
	if(&src==this)
		return;
	newRow=src.newRow;
	
	CONTACTINFO=src.CONTACTINFO;
	ACCOUNTNUM=src.ACCOUNTNUM;
	INITIALBAL=src.INITIALBAL;
	HELDAT=src.HELDAT;
	CURRENCYID=src.CURRENCYID;
	ACCOUNTTYPE=src.ACCOUNTTYPE;
	NOTES=src.NOTES;
	ACCESSINFO=src.ACCESSINFO;
	ACCOUNTNAME=src.ACCOUNTNAME;
	STATUS=src.STATUS;
	ACCOUNTID=src.ACCOUNTID;
	WEBSITE=src.WEBSITE;
	FAVORITEACCT=src.FAVORITEACCT;

}

ACCOUNTLIST_V1Row::ACCOUNTLIST_V1Row(DatabaseLayer* database,const wxString& table):wxActiveRecordRow(database,table){
	newRow=true;
}
	

ACCOUNTLIST_V1Row& ACCOUNTLIST_V1Row::operator=(const ACCOUNTLIST_V1Row& src){
	if(&src==this)
		return *this;
	newRow=src.newRow;
	
	CONTACTINFO=src.CONTACTINFO;
	ACCOUNTNUM=src.ACCOUNTNUM;
	INITIALBAL=src.INITIALBAL;
	HELDAT=src.HELDAT;
	CURRENCYID=src.CURRENCYID;
	ACCOUNTTYPE=src.ACCOUNTTYPE;
	NOTES=src.NOTES;
	ACCESSINFO=src.ACCESSINFO;
	ACCOUNTNAME=src.ACCOUNTNAME;
	STATUS=src.STATUS;
	ACCOUNTID=src.ACCOUNTID;
	WEBSITE=src.WEBSITE;
	FAVORITEACCT=src.FAVORITEACCT;


	return *this;
}

bool ACCOUNTLIST_V1Row::GetFromResult(DatabaseResultSet* result){
	
	newRow=false;
		CONTACTINFO=result->GetResultString(wxT("CONTACTINFO"));
	ACCOUNTNUM=result->GetResultString(wxT("ACCOUNTNUM"));
	INITIALBAL=result->GetResultDouble(wxT("INITIALBAL"));
	HELDAT=result->GetResultString(wxT("HELDAT"));
	CURRENCYID=result->GetResultInt(wxT("CURRENCYID"));
	ACCOUNTTYPE=result->GetResultString(wxT("ACCOUNTTYPE"));
	NOTES=result->GetResultString(wxT("NOTES"));
	ACCESSINFO=result->GetResultString(wxT("ACCESSINFO"));
	ACCOUNTNAME=result->GetResultString(wxT("ACCOUNTNAME"));
	STATUS=result->GetResultString(wxT("STATUS"));
	ACCOUNTID=result->GetResultInt(wxT("ACCOUNTID"));
	WEBSITE=result->GetResultString(wxT("WEBSITE"));
	FAVORITEACCT=result->GetResultString(wxT("FAVORITEACCT"));


	return true;
}
	

bool ACCOUNTLIST_V1Row::Save(){
	try{
		if(newRow){
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("INSERT INTO %s (CONTACTINFO,ACCOUNTNUM,INITIALBAL,HELDAT,CURRENCYID,ACCOUNTTYPE,NOTES,ACCESSINFO,ACCOUNTNAME,STATUS,WEBSITE,FAVORITEACCT) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)"),m_table.c_str()));
			pStatement->SetParamString(1,CONTACTINFO);
			pStatement->SetParamString(2,ACCOUNTNUM);
			pStatement->SetParamDouble(3,INITIALBAL);
			pStatement->SetParamString(4,HELDAT);
			pStatement->SetParamInt(5,CURRENCYID);
			pStatement->SetParamString(6,ACCOUNTTYPE);
			pStatement->SetParamString(7,NOTES);
			pStatement->SetParamString(8,ACCESSINFO);
			pStatement->SetParamString(9,ACCOUNTNAME);
			pStatement->SetParamString(10,STATUS);
			pStatement->SetParamString(11,WEBSITE);
			pStatement->SetParamString(12,FAVORITEACCT);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

			
			newRow=false;
		}
		else{
			PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("UPDATE %s SET CONTACTINFO=?,ACCOUNTNUM=?,INITIALBAL=?,HELDAT=?,CURRENCYID=?,ACCOUNTTYPE=?,NOTES=?,ACCESSINFO=?,ACCOUNTNAME=?,STATUS=?,WEBSITE=?,FAVORITEACCT=? WHERE ACCOUNTID=?"),m_table.c_str()));
			pStatement->SetParamString(1,CONTACTINFO);
			pStatement->SetParamString(2,ACCOUNTNUM);
			pStatement->SetParamDouble(3,INITIALBAL);
			pStatement->SetParamString(4,HELDAT);
			pStatement->SetParamInt(5,CURRENCYID);
			pStatement->SetParamString(6,ACCOUNTTYPE);
			pStatement->SetParamString(7,NOTES);
			pStatement->SetParamString(8,ACCESSINFO);
			pStatement->SetParamString(9,ACCOUNTNAME);
			pStatement->SetParamString(10,STATUS);
			pStatement->SetParamInt(13,ACCOUNTID);
			pStatement->SetParamString(11,WEBSITE);
			pStatement->SetParamString(12,FAVORITEACCT);
			pStatement->RunQuery();
			m_database->CloseStatement(pStatement);

		}
		
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		wxActiveRecord::ProcessException(e);
		return false;
	}
}

bool ACCOUNTLIST_V1Row::Delete(){
	try{
		PreparedStatement* pStatement=m_database->PrepareStatement(wxString::Format(wxT("DELETE FROM %s WHERE ACCOUNTID=?"),m_table.c_str()));
		pStatement->SetParamInt(1,ACCOUNTID);
		pStatement->ExecuteUpdate();
		return true;
	}
	catch(DatabaseLayerException& e){
		throw(e);
		return false;
	}
}



CHECKINGACCOUNT_V1RowSet* ACCOUNTLIST_V1Row::GetCHECKINGACCOUNT_V1s(const wxString& orderBy){
	CHECKINGACCOUNT_V1RowSet* set= new CHECKINGACCOUNT_V1RowSet(m_database,wxT("CHECKINGACCOUNT_V1"));
	wxString str_statement =wxT("SELECT * FROM CHECKINGACCOUNT_V1 WHERE ACCOUNTID=?");
	if(!orderBy.IsEmpty())
		str_statement+=wxT(" ORDER BY ")+orderBy;
	PreparedStatement* pStatement=m_database->PrepareStatement(str_statement);
	pStatement->SetParamInt(1,ACCOUNTID);
	DatabaseResultSet* result= pStatement->ExecuteQuery();

	while(result->Next()){
		CHECKINGACCOUNT_V1Row* toAdd=new CHECKINGACCOUNT_V1Row(m_database,wxT("CHECKINGACCOUNT_V1"));
		toAdd->GetFromResult(result);
		set->Add(toAdd);
	}
	garbageRowSets.Add(set);
	m_database->CloseResultSet(result);
	m_database->CloseStatement(pStatement);
	return set;
}

CHECKINGACCOUNT_V1RowSet* ACCOUNTLIST_V1Row::GetCHECKINGACCOUNT_V1s(const wxString& orderBy){
	CHECKINGACCOUNT_V1RowSet* set= new CHECKINGACCOUNT_V1RowSet(m_database,wxT("CHECKINGACCOUNT_V1"));
	wxString str_statement =wxT("SELECT * FROM CHECKINGACCOUNT_V1 WHERE TOACCOUNTID=?");
	if(!orderBy.IsEmpty())
		str_statement+=wxT(" ORDER BY ")+orderBy;
	PreparedStatement* pStatement=m_database->PrepareStatement(str_statement);
	pStatement->SetParamInt(1,ACCOUNTID);
	DatabaseResultSet* result= pStatement->ExecuteQuery();

	while(result->Next()){
		CHECKINGACCOUNT_V1Row* toAdd=new CHECKINGACCOUNT_V1Row(m_database,wxT("CHECKINGACCOUNT_V1"));
		toAdd->GetFromResult(result);
		set->Add(toAdd);
	}
	garbageRowSets.Add(set);
	m_database->CloseResultSet(result);
	m_database->CloseStatement(pStatement);
	return set;
}



/** END ACTIVE RECORD ROW **/

/** ACTIVE RECORD ROW SET **/

ACCOUNTLIST_V1RowSet::ACCOUNTLIST_V1RowSet():wxActiveRecordRowSet(){
}

ACCOUNTLIST_V1RowSet::ACCOUNTLIST_V1RowSet(wxActiveRecord* activeRecord):wxActiveRecordRowSet(activeRecord){
}

ACCOUNTLIST_V1RowSet::ACCOUNTLIST_V1RowSet(DatabaseLayer* database,const wxString& table):wxActiveRecordRowSet(database,table){
}

ACCOUNTLIST_V1Row* ACCOUNTLIST_V1RowSet::Item(unsigned long item){
	return (ACCOUNTLIST_V1Row*)wxActiveRecordRowSet::Item(item);
}


bool ACCOUNTLIST_V1RowSet::SaveAll(){
	try{
		m_database->BeginTransaction();
		for(unsigned long i=0;i<Count();i++)
			Item(i)->Save();
		m_database->Commit();
		return true;
	}
	catch (DatabaseLayerException& e)
	{
		m_database->RollBack();
		wxActiveRecord::ProcessException(e);
		return false;
	}
}


int ACCOUNTLIST_V1RowSet::CMPFUNC_CONTACTINFO(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ACCOUNTLIST_V1Row** m_item1=(ACCOUNTLIST_V1Row**)item1;
	ACCOUNTLIST_V1Row** m_item2=(ACCOUNTLIST_V1Row**)item2;
	return (*m_item1)->CONTACTINFO.Cmp((*m_item2)->CONTACTINFO);
}

int ACCOUNTLIST_V1RowSet::CMPFUNC_ACCOUNTNUM(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ACCOUNTLIST_V1Row** m_item1=(ACCOUNTLIST_V1Row**)item1;
	ACCOUNTLIST_V1Row** m_item2=(ACCOUNTLIST_V1Row**)item2;
	return (*m_item1)->ACCOUNTNUM.Cmp((*m_item2)->ACCOUNTNUM);
}

int ACCOUNTLIST_V1RowSet::CMPFUNC_INITIALBAL(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ACCOUNTLIST_V1Row** m_item1=(ACCOUNTLIST_V1Row**)item1;
	ACCOUNTLIST_V1Row** m_item2=(ACCOUNTLIST_V1Row**)item2;
	if((*m_item1)->INITIALBAL<(*m_item2)->INITIALBAL)
		return -1;
	else if((*m_item1)->INITIALBAL>(*m_item2)->INITIALBAL)
		return 1;
	else
		return 0;
}

int ACCOUNTLIST_V1RowSet::CMPFUNC_HELDAT(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ACCOUNTLIST_V1Row** m_item1=(ACCOUNTLIST_V1Row**)item1;
	ACCOUNTLIST_V1Row** m_item2=(ACCOUNTLIST_V1Row**)item2;
	return (*m_item1)->HELDAT.Cmp((*m_item2)->HELDAT);
}

int ACCOUNTLIST_V1RowSet::CMPFUNC_CURRENCYID(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ACCOUNTLIST_V1Row** m_item1=(ACCOUNTLIST_V1Row**)item1;
	ACCOUNTLIST_V1Row** m_item2=(ACCOUNTLIST_V1Row**)item2;
	if((*m_item1)->CURRENCYID<(*m_item2)->CURRENCYID)
		return -1;
	else if((*m_item1)->CURRENCYID>(*m_item2)->CURRENCYID)
		return 1;
	else
		return 0;
}

int ACCOUNTLIST_V1RowSet::CMPFUNC_ACCOUNTTYPE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ACCOUNTLIST_V1Row** m_item1=(ACCOUNTLIST_V1Row**)item1;
	ACCOUNTLIST_V1Row** m_item2=(ACCOUNTLIST_V1Row**)item2;
	return (*m_item1)->ACCOUNTTYPE.Cmp((*m_item2)->ACCOUNTTYPE);
}

int ACCOUNTLIST_V1RowSet::CMPFUNC_NOTES(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ACCOUNTLIST_V1Row** m_item1=(ACCOUNTLIST_V1Row**)item1;
	ACCOUNTLIST_V1Row** m_item2=(ACCOUNTLIST_V1Row**)item2;
	return (*m_item1)->NOTES.Cmp((*m_item2)->NOTES);
}

int ACCOUNTLIST_V1RowSet::CMPFUNC_ACCESSINFO(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ACCOUNTLIST_V1Row** m_item1=(ACCOUNTLIST_V1Row**)item1;
	ACCOUNTLIST_V1Row** m_item2=(ACCOUNTLIST_V1Row**)item2;
	return (*m_item1)->ACCESSINFO.Cmp((*m_item2)->ACCESSINFO);
}

int ACCOUNTLIST_V1RowSet::CMPFUNC_ACCOUNTNAME(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ACCOUNTLIST_V1Row** m_item1=(ACCOUNTLIST_V1Row**)item1;
	ACCOUNTLIST_V1Row** m_item2=(ACCOUNTLIST_V1Row**)item2;
	return (*m_item1)->ACCOUNTNAME.Cmp((*m_item2)->ACCOUNTNAME);
}

int ACCOUNTLIST_V1RowSet::CMPFUNC_STATUS(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ACCOUNTLIST_V1Row** m_item1=(ACCOUNTLIST_V1Row**)item1;
	ACCOUNTLIST_V1Row** m_item2=(ACCOUNTLIST_V1Row**)item2;
	return (*m_item1)->STATUS.Cmp((*m_item2)->STATUS);
}

int ACCOUNTLIST_V1RowSet::CMPFUNC_ACCOUNTID(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ACCOUNTLIST_V1Row** m_item1=(ACCOUNTLIST_V1Row**)item1;
	ACCOUNTLIST_V1Row** m_item2=(ACCOUNTLIST_V1Row**)item2;
	if((*m_item1)->ACCOUNTID<(*m_item2)->ACCOUNTID)
		return -1;
	else if((*m_item1)->ACCOUNTID>(*m_item2)->ACCOUNTID)
		return 1;
	else
		return 0;
}

int ACCOUNTLIST_V1RowSet::CMPFUNC_WEBSITE(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ACCOUNTLIST_V1Row** m_item1=(ACCOUNTLIST_V1Row**)item1;
	ACCOUNTLIST_V1Row** m_item2=(ACCOUNTLIST_V1Row**)item2;
	return (*m_item1)->WEBSITE.Cmp((*m_item2)->WEBSITE);
}

int ACCOUNTLIST_V1RowSet::CMPFUNC_FAVORITEACCT(wxActiveRecordRow** item1,wxActiveRecordRow** item2){
	ACCOUNTLIST_V1Row** m_item1=(ACCOUNTLIST_V1Row**)item1;
	ACCOUNTLIST_V1Row** m_item2=(ACCOUNTLIST_V1Row**)item2;
	return (*m_item1)->FAVORITEACCT.Cmp((*m_item2)->FAVORITEACCT);
}

CMPFUNC_proto ACCOUNTLIST_V1RowSet::GetCmpFunc(const wxString& var) const{
	if(var==wxT("CONTACTINFO"))
		return (CMPFUNC_proto)CMPFUNC_CONTACTINFO;
	else if(var==wxT("ACCOUNTNUM"))
		return (CMPFUNC_proto)CMPFUNC_ACCOUNTNUM;
	else if(var==wxT("INITIALBAL"))
		return (CMPFUNC_proto)CMPFUNC_INITIALBAL;
	else if(var==wxT("HELDAT"))
		return (CMPFUNC_proto)CMPFUNC_HELDAT;
	else if(var==wxT("CURRENCYID"))
		return (CMPFUNC_proto)CMPFUNC_CURRENCYID;
	else if(var==wxT("ACCOUNTTYPE"))
		return (CMPFUNC_proto)CMPFUNC_ACCOUNTTYPE;
	else if(var==wxT("NOTES"))
		return (CMPFUNC_proto)CMPFUNC_NOTES;
	else if(var==wxT("ACCESSINFO"))
		return (CMPFUNC_proto)CMPFUNC_ACCESSINFO;
	else if(var==wxT("ACCOUNTNAME"))
		return (CMPFUNC_proto)CMPFUNC_ACCOUNTNAME;
	else if(var==wxT("STATUS"))
		return (CMPFUNC_proto)CMPFUNC_STATUS;
	else if(var==wxT("ACCOUNTID"))
		return (CMPFUNC_proto)CMPFUNC_ACCOUNTID;
	else if(var==wxT("WEBSITE"))
		return (CMPFUNC_proto)CMPFUNC_WEBSITE;
	else if(var==wxT("FAVORITEACCT"))
		return (CMPFUNC_proto)CMPFUNC_FAVORITEACCT;
	else 
	return (CMPFUNC_proto)CMPFUNC_default;
}



/** END ACTIVE RECORD ROW SET **/

////@@begin custom implementations



////@@end custom implementations