/////////////////////////////////////////////////////
// Generated By wxActiveRecordGenerator v 1.2.0-rc3
/////////////////////////////////////////////////////


#ifndef __I_N_F_O_T_A_B_L_E__V1_
#define __I_N_F_O_T_A_B_L_E__V1_

////@@begin gen include
#include "wxActiveRecord.h"
#include <wx/wx.h>
#include <wx/string.h>
#include <wx/datetime.h>

////@@end gen include

////@@begin custom include
////@@end custom include

////@@begin gen forward
class INFOTABLE_V1;
class INFOTABLE_V1Row;
class INFOTABLE_V1RowSet;


////@@end gen forward

////@@begin custom forward
////@@end custom forward

////@@begin gen arClass
class INFOTABLE_V1: public wxSqliteActiveRecord{
protected:
	INFOTABLE_V1Row* RowFromResult(DatabaseResultSet* result);
public:
	INFOTABLE_V1();
	INFOTABLE_V1(const wxString& name,const wxString& server=wxEmptyString,const wxString& user=wxEmptyString,const wxString& password=wxEmptyString,const wxString& table=wxT("INFOTABLE_V1"));
	INFOTABLE_V1(DatabaseLayer* database,const wxString& table=wxT("INFOTABLE_V1"));
	bool Create(const wxString& name,const wxString& server=wxEmptyString,const wxString& user=wxEmptyString,const wxString& password=wxEmptyString,const wxString& table=wxT("INFOTABLE_V1"));
	
	INFOTABLE_V1Row* New();
	bool Delete(int key);

	
	INFOTABLE_V1Row* INFOID(int key);

	INFOTABLE_V1Row* Where(const wxString& whereClause);
	INFOTABLE_V1RowSet* WhereSet(const wxString& whereClause,const wxString& orderBy=wxEmptyString);
	INFOTABLE_V1RowSet* All(const wxString& orderBy=wxEmptyString); 

////@@begin custom arClass
public:


////@@end custom arClass
};
////@@end gen arClass

////@@begin gen arRow
class INFOTABLE_V1Row: public wxActiveRecordRow{
public:
	INFOTABLE_V1Row();
	INFOTABLE_V1Row(const INFOTABLE_V1Row& src);
	INFOTABLE_V1Row(INFOTABLE_V1* activeRecord);
	INFOTABLE_V1Row(DatabaseLayer* database,const wxString& table=wxT("INFOTABLE_V1"));
	INFOTABLE_V1Row& operator=(const INFOTABLE_V1Row& src);
	bool GetFromResult(DatabaseResultSet* result);
public:
	wxString INFOVALUE;
	wxString INFONAME;
	int INFOID;

public:
	
	
	bool Save();
	bool Delete();
	
	
////@@begin custom arRow
public:


////@@end custom arRow	

};
////@@end gen arRow

////@@begin gen arSet
class INFOTABLE_V1RowSet: public wxActiveRecordRowSet{
public:
	INFOTABLE_V1RowSet();
	INFOTABLE_V1RowSet(wxActiveRecord* activeRecord);
	INFOTABLE_V1RowSet(DatabaseLayer* database,const wxString& table=wxT("INFOTABLE_V1"));
	virtual INFOTABLE_V1Row* Item(unsigned long item);
	
	virtual bool SaveAll();
	
	
protected:
	static int CMPFUNC_INFOVALUE(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_INFONAME(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_INFOID(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	static int CMPFUNC_global(wxActiveRecordRow** item1,wxActiveRecordRow** item2);
	virtual CMPFUNC_proto GetCmpFunc(const wxString& var) const;

////@@begin custom arSet
public:


////@@end custom arSet
};
////@@end gen arSet

#endif /* __I_N_F_O_T_A_B_L_E__V1_ */