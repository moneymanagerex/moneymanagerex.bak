<?xml version="1.0" ?>

<!--
    MMEX build scripts.
    Copyright (C) 2009, 2010 VaDiM.

    Common templates.
-->

<makefile>

    <!-- check version of Bakefile -->
    <requires version="0.2.9"/>


    <!-- define some var's for projects before calling presets -->
    <if cond="FORMAT in ['msvc6prj','msevc4prj','msvs2008prj']">
        <set var="WX_SHARED">0</set>
        <set var="WX_UNICODE">1</set>
        <set var="WX_MONOLITHIC">0</set>
    </if>
  
    <include file="presets/wx.bkl"/>
    <include file="config.bkl"/>


    <set var="CAN_CONFIG">
        <!-- condition must be the same as for <include file="wx_win32.bkl"> in presets\wx\wx.bkl -->
        <if cond="FORMAT!='autoconf' and PLATFORM_WIN32=='1'">1</if>
    </set>


    <if cond="CAN_CONFIG=='1'">

        <!-- redefine defaults -->

        <set var="WX_DEBUG_DEFAULT">0</set>
        <set var="WX_UNICODE_DEFAULT">1</set>

        <if cond="FORMAT=='mingw'">
            <set var="WX_MONOLITHIC_DEFAULT">1</set>
        </if>

        <!-- VC++ makefile -->

        <if cond="FORMAT=='msvc'">

            <set var="VSTUDIO_VER_DEFAULT" overwrite="0">2013</set>

            <option name="VSTUDIO_VER">
                <values>2013</values>
                <default-value>$(VSTUDIO_VER_DEFAULT)</default-value>
                <description>The version of Visual Studio</description>
            </option>

            <set var="CRT_VERSION">
                <if cond="VSTUDIO_VER=='2013'">120</if>
            </set>

        </if>


        <!-- except VC++ IDE projects -->
        <if cond="not FORMAT.endswith('prj')">

            <set var="CPU_ARCH">
                <if cond="TARGET_CPU==''">x86</if>
                <if cond="TARGET_CPU=='x86'">x86</if>
                <if cond="TARGET_CPU=='AMD64'">x64</if>
                <if cond="TARGET_CPU=='IA64'">ia64</if>
            </set>

            <set var="TARGETCPUPOSTFIX">-$(CPU_ARCH)</set>

        </if>


        <!-- set compiler's flags according to selected options -->

        <set var="DEBUGINFO">
            <if cond="WX_DEBUG=='1'">on</if>
            <if cond="WX_DEBUG=='0'">off</if>
        </set>

        <set var="DEBUG_DEFINE">
            <if cond="WX_DEBUG=='1'">_DEBUG</if>
            <if cond="WX_DEBUG=='0'">NDEBUG</if>
        </set>

        <set var="OPTIMIZEFLAG">
            <if cond="WX_DEBUG=='1'">off</if>
            <if cond="WX_DEBUG=='0'">speed</if>
        </set>

    <set var="SHAREDBUILDPOSTFIX">
            <if cond="WX_SHARED=='0'">static</if>
            <if cond="WX_SHARED=='1'">shared</if>
    </set>

    <set var="UNICODEBUILDPOSTFIX">
            <if cond="WX_UNICODE=='1'">u</if>
    </set>

    <set var="DEBUGBUILDPOSTFIX">
        <if cond="WX_DEBUG=='1'">d</if>
    </set>

    </if>


    <!-- generic compiler's flags -->

    <template id="compiler_common">

        <precomp-headers>off</precomp-headers>
        <threading>multi</threading>
        <warnings>max</warnings>
        <pic>on</pic>

        <if cond="CAN_CONFIG=='1'">
            <debug-info>$(DEBUGINFO)</debug-info>
            <debug-info-edit-and-continue>$(DEBUGINFO)</debug-info-edit-and-continue>
            <optimize>$(OPTIMIZEFLAG)</optimize>
            <define>$(DEBUG_DEFINE)</define>
        </if>

        <if cond="FORMAT in ['msvc', 'msvs2005prj','msvs2008prj']">
          <cppflags>/D_CRT_SECURE_NO_WARNINGS</cppflags>
          <ldflags>/SAFESEH:NO</ldflags>
        </if>

    </template>


    <include file="wxsqlite.bkl"/>
    <include file="lua.bkl"/>


    <!-- Prepend valid lib-path if TARGET_CPU option set.
         Template "wx" sets lib-path to x86 libs (lib\vc_lib) even if x64 libs exists (lib\vc_amd64_lib).
         We should insert valid lib-path prior wrong one.
         See wxWidgets\build\bakefiles\config.bkl <== TARGET_CPU, common.bkl <== DIR_SUFFIX_CPU.
    -->

    <template id="lib_path_x64_hack">

        <if cond="CAN_CONFIG=='1' and isdefined('TARGET_CPU')">

            <set var="CPU_SUF">
                <if cond="TARGET_CPU=='AMD64'">_amd64</if>
                <if cond="TARGET_CPU=='IA64'">_ia64</if>
            </set>

            <set var="LIB_SUF">
                <if cond="WX_SHARED=='0'">_lib</if>
                <if cond="WX_SHARED=='1'">_dll</if>
            </set>

            <!-- prepend valid lib-path to x64 libs (\lib\vc_amd64_lib) -->

            <lib-path prepend="1">
                $(nativePaths(WX_DIR) + '\lib' + DIRSEP + COMPILER + CPU_SUF + LIB_SUF)
            </lib-path>

        </if>

    </template>


    <!-- common part of mmex and mmex_tests -->

    <template id="mmex_common" template="wx,lib_path_x64_hack,compiler_common">

        <cxx-exceptions>on</cxx-exceptions>
        <cxx-rtti>on</cxx-rtti>

        <include>$(SRCDIR)/lib/wxsqlite3/sqlite3/secure/src</include>
        <include>$(SRCDIR)/lib/wxsqlite3/include</include>
        <include>$(SRCDIR)/lib/lua/src</include>
        <include>$(SRCDIR)/lib</include>
        <include>$(SRCDIR)/3rd</include>
        <include>$(SRCDIR)/3rd/LuaGlue/include</include>
        <include>$(SRCDIR)/3rd/cgitemplate</include>
        <include>$(SRCDIR)/3rd/csv-parser/include</include>
        <include>$(SRCDIR)/3rd/wxExtension/extension/src</include>
        <include>$(SRCDIR)/src</include>

        <!-- disable precompiled headers for wxWidgets -->
        <define>NOPCH</define>

        <library>wxsqlite</library>
        <library>lua</library>

        <!-- relative to trunk/mmex -->

        <set var="PLATF_DIR">
            <if cond="TOOLSET=='win32'">win</if>
            <if cond="TOOLSET=='unix'">unix</if>
            <if cond="1">/mac</if>
        </set>

        <headers>$(fileList( [ 'src/*.h', 'src/reports/*.h', 'src/db/*.h', 'src/import_export/*.h', 'src/model/*.h' ] ))</headers>
        <sources>$(fileList( [ 'src/*.cpp', 'src/reports/*.cpp', 'src/db/*.cpp', 'src/' + PLATF_DIR + '/*.cpp', 'src/import_export/*.cpp', 'src/model/*.cpp' ] ))</sources>
        <headers>$(fileList( [ '3rd/cgitemplate/html_template.h', '3rd/mongoose/*.h' ] ))</headers>
        <sources>$(fileList( [ '3rd/cgitemplate/html_template.cpp', '3rd/mongoose/*.c' ] ))</sources>
        <sources>$(fileList( [ '3rd/csv-parser/*.cpp' ] ))</sources>
        <sources>$(fileList( [ '3rd/wxExtension/extension/src/*.cpp' ] ))</sources>


        <!-- Microsoft compilers only, enable PDB for Release build -->

        <if cond="FORMAT.startswith('msv')">

            <!-- Program Database -->

            <set var="CL_FLAGS"><if cond="WX_DEBUG=='0'">/Zi</if></set>
            <cxxflags>$(CL_FLAGS)</cxxflags>

            <!-- /opt:ref option suppressed by using /debug linker option by default
                  but should be always enabled for release builds -->

            <set var="LINK_FLAGS"><if cond="WX_DEBUG=='0'">/DEBUG /MAP /MAPINFO:EXPORTS /OPT:REF /OPT:ICF</if></set>
            <ldflags>$(LINK_FLAGS)</ldflags>

        </if>


        <!-- Embed a manifest inside executable for VC++.
             By default, Visual Studio tries to embed the manifest when it builds a project from source files.
             However if an application is built by using nmake, some changes to the existing makefile are necessary.

             FIXME: If you are doing an incremental build, directly editing the resource as done here will disable
                    incremental building and cause a full rebuild. The possible decision described on MSDN
                    in document "How to: Embed a Manifest Inside a C/C++ Application".
    -->

        <if cond="FORMAT=='msvc'">

            <set var="TARGET_PATH">$(BUILDDIR + DIRSEP + id + EXEEXT)</set>

        <postlink-command>
            mt.exe -manifest "$(TARGET_PATH).manifest" -outputresource:"$(TARGET_PATH)";1
            </postlink-command>

    </if>


        <!-- wxWidgets libs, "base" must be last -->

        <wx-lib>core</wx-lib>
        <wx-lib>qa</wx-lib>
        <wx-lib>net</wx-lib>
        <wx-lib>html</wx-lib>
        <wx-lib>xml</wx-lib>
        <wx-lib>aui</wx-lib>
        <wx-lib>adv</wx-lib>
        <wx-lib>stc</wx-lib>
        <wx-lib>webview</wx-lib>
        <wx-lib>base</wx-lib>

    </template>


</makefile>
